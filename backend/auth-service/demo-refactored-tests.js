#!/usr/bin/env node

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Auth Service');
console.log('=' .repeat(60));
console.log('');

console.log('üìã –ß—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:');
console.log('  ‚úÖ SagaModule - –¥–æ–±–∞–≤–ª–µ–Ω HttpClientModule');
console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (SQLite –≤ –ø–∞–º—è—Ç–∏)');
console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–∫ Redis —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
console.log('  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ThrottlerModule');
console.log('  ‚úÖ –£–ª—É—á—à–µ–Ω—ã –º–æ–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö HTTP –∫–ª–∏–µ–Ω—Ç–æ–≤');
console.log('  ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞');
console.log('  ‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ e2e –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
console.log('');

console.log('üß™ –¢–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã:');
console.log('  1. Token Validation Flow (16 —Ç–µ—Å—Ç–æ–≤)');
console.log('  2. Complete User Registration Flow');
console.log('  3. Complete User Login Flow');
console.log('  4. Complete Logout Flow');
console.log('  5. Token Refresh Flow');
console.log('  6. Redis Integration Tests');
console.log('');

console.log('üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:');
console.log('  ‚Ä¢ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ (SQLite –≤ –ø–∞–º—è—Ç–∏)');
console.log('  ‚Ä¢ –ú–æ–∫–∏ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (User, Security, Notification)');
console.log('  ‚Ä¢ –≠–º—É–ª—è—Ü–∏—è –æ–±—â–µ–≥–æ Redis –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤');
console.log('  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞');
console.log('  ‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∫–æ–≤');
console.log('');

async function runDemo() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...\n');

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    console.log('üìä –ó–∞–ø—É—Å–∫ Token Service —Ç–µ—Å—Ç–æ–≤...');
    await runJest(['src/token/token.service.spec.ts'], 'jest.config.js', 'Token Service Unit Tests');

    console.log('\nüåê –ó–∞–ø—É—Å–∫ E2E —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
    await runJest(['test/auth-flows-refactored.e2e-spec.ts'], 'test/jest-e2e.json', 'Authentication Flows E2E Tests');

    console.log('\nüîÑ –ó–∞–ø—É—Å–∫ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...');
    await runJest(['test/redis-integration-refactored.spec.ts'], 'test/jest-e2e.json', 'Redis Integration Tests');

    console.log('\n' + '='.repeat(60));
    console.log('üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞:');
    console.log('  ‚úÖ –í—Å–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç');
    console.log('  ‚úÖ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã');
    console.log('  ‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
    console.log('  ‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤');
    console.log('  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    console.log('');
    console.log('üîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log('  npm run test:refactored');
    console.log('');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
    console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('  ‚Ä¢ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (npm install)');
    console.log('  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏–µ–π');
    console.log('  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —Ç–µ—Å—Ç–æ–≤');
    console.log('');
    console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
    console.log('  1. npm install');
    console.log('  2. npm run build');
    console.log('  3. npm run test:refactored');
    process.exit(1);
  }
}

function runJest(testFiles, configFile, description) {
  return new Promise((resolve, reject) => {
    console.log(`\nüìã ${description}`);
    console.log('-'.repeat(40));

    const args = [
      '--config', configFile,
      '--verbose',
      '--runInBand',
      '--forceExit',
      '--no-coverage', // –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è –¥–µ–º–æ
      ...testFiles
    ];

    console.log(`üîß –ö–æ–º–∞–Ω–¥–∞: npx jest ${args.join(' ')}`);
    console.log('');

    const jest = spawn('npx', ['jest', ...args], {
      stdio: 'inherit',
      cwd: process.cwd(),
      env: {
        ...process.env,
        NODE_ENV: 'test',
        IS_DEMO_TEST: 'true'
      }
    });

    jest.on('close', (code) => {
      if (code === 0) {
        console.log(`\n‚úÖ ${description} - –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û`);
        resolve();
      } else {
        console.log(`\n‚ùå ${description} - –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–û–ô (–∫–æ–¥: ${code})`);
        reject(new Error(`Jest exited with code ${code}`));
      }
    });

    jest.on('error', (error) => {
      console.error(`\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Jest –¥–ª—è ${description}: ${error.message}`);
      reject(error);
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => {
  console.log('\n\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  process.exit(0);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('\n‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
runDemo();