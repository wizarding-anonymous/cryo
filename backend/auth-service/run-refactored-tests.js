#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
 */

const { spawn } = require('child_process');
const path = require('path');

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Auth Service...\n');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
const refactoredTests = [
  // E2E —Ç–µ—Å—Ç—ã
  'test/auth-flows-refactored.e2e-spec.ts',
  'test/redis-integration-refactored.spec.ts',
  
  // Unit —Ç–µ—Å—Ç—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ)
  'src/token/token.service.spec.ts',
  'src/auth/auth.service.login.spec.ts',
  'src/auth/auth.service.logout.spec.ts',
  'src/auth/auth.service.register.spec.ts',
  'src/auth/auth.service.refresh.spec.ts',
  'src/session/session.service.spec.ts',
];

async function runTests() {
  console.log('üìã –ó–∞–ø—É—Å–∫–∞–µ–º—ã–µ —Ç–µ—Å—Ç—ã:');
  refactoredTests.forEach(test => console.log(`  - ${test}`));
  console.log('');

  // –ó–∞–ø—É—Å–∫–∞–µ–º unit —Ç–µ—Å—Ç—ã
  console.log('üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...');
  const unitTests = refactoredTests.filter(test => test.startsWith('src/'));
  
  if (unitTests.length > 0) {
    await runJest(unitTests, 'jest.config.js');
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º e2e —Ç–µ—Å—Ç—ã
  console.log('\nüåê –ó–∞–ø—É—Å–∫ e2e —Ç–µ—Å—Ç–æ–≤...');
  const e2eTests = refactoredTests.filter(test => test.startsWith('test/'));
  
  if (e2eTests.length > 0) {
    await runJest(e2eTests, 'test/jest-e2e.json');
  }

  console.log('\n‚úÖ –í—Å–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

function runJest(testFiles, configFile) {
  return new Promise((resolve, reject) => {
    const args = [
      '--config', configFile,
      '--verbose',
      '--runInBand', // –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      '--forceExit', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      '--detectOpenHandles', // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ö–µ–Ω–¥–ª–æ–≤
      ...testFiles
    ];

    console.log(`–ö–æ–º–∞–Ω–¥–∞: npx jest ${args.join(' ')}`);

    const jest = spawn('npx', ['jest', ...args], {
      stdio: 'inherit',
      cwd: process.cwd(),
      env: {
        ...process.env,
        NODE_ENV: 'test',
        IS_REFACTORED_TEST: 'true'
      }
    });

    jest.on('close', (code) => {
      if (code === 0) {
        console.log(`‚úÖ –¢–µ—Å—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–æ–º ${configFile} –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
        resolve();
      } else {
        console.log(`‚ùå –¢–µ—Å—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥–æ–º ${configFile} –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: ${code})`);
        reject(new Error(`Jest exited with code ${code}`));
      }
    });

    jest.on('error', (error) => {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Jest: ${error.message}`);
      reject(error);
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
runTests().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', error.message);
  process.exit(1);
});