// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ User Service
const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

async function testUserService() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User Service...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
    const rootResponse = await axios.get(`${BASE_URL}/`);
    console.log(`   ‚úÖ GET / - Status: ${rootResponse.status}, Data: ${rootResponse.data}`);

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log(`   ‚úÖ GET /health - Status: ${healthResponse.status}`);
    console.log(`   üìä Health Status: ${healthResponse.data.status}`);

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫...');
    const metricsResponse = await axios.get(`${BASE_URL}/metrics`);
    console.log(`   ‚úÖ GET /metrics - Status: ${metricsResponse.status}`);
    console.log(`   üìà Metrics size: ${metricsResponse.data.length} bytes`);

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
    const swaggerResponse = await axios.get(`${BASE_URL}/api-docs-json`);
    console.log(`   ‚úÖ GET /api-docs-json - Status: ${swaggerResponse.status}`);
    console.log(`   üìö API Title: ${swaggerResponse.data.info.title}`);
    console.log(`   üìö API Version: ${swaggerResponse.data.info.version}`);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
    console.log('   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ Prometheus —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log('   ‚úÖ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã');
    console.log('   ‚úÖ PostgreSQL –∏ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    if (error.response) {
      console.error(`   Status: ${error.response.status}`);
      console.error(`   Data: ${error.response.data}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testUserService();