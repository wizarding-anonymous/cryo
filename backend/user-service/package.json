{
  "name": "user-service",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "cross-env NODE_ENV=test jest --config ./test/jest-e2e.json --forceExit --detectOpenHandles",
    "test:integration": "cross-env NODE_ENV=test jest --config ./test/jest-integration.json --forceExit --detectOpenHandles",
    "test:e2e:setup": "docker-compose -f docker-compose.test.yml up -d",
    "test:e2e:teardown": "docker-compose -f docker-compose.test.yml down",
    "test:e2e:full": "npm run test:e2e:setup && sleep 10 && npm run test:e2e && npm run test:e2e:teardown",
    "typeorm": "ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js --dataSource ./data-source.ts",
    "migration:generate": "npm run typeorm -- migration:generate src/database/migrations/$npm_config_name",
    "migration:run": "npm run typeorm -- migration:run",
    "migration:revert": "npm run typeorm -- migration:revert",
    "docker:up": "cd ../ && docker-compose up -d user-service",
    "docker:down": "cd ../ && docker-compose down",
    "docker:logs": "cd ../ && docker-compose logs -f user-service",
    "docker:build": "cd ../ && docker-compose build user-service",
    "docker:restart": "cd ../ && docker-compose restart user-service",
    "docker:up-all": "cd ../ && docker-compose up -d",
    "docker:test:up": "cd ../ && docker-compose -f docker-compose.user-only.yml up -d",
    "docker:test:down": "cd ../ && docker-compose -f docker-compose.user-only.yml down -v",
    "docker:test:logs": "cd ../ && docker-compose -f docker-compose.user-only.yml logs -f user-service",
    "docker:test:build": "cd ../ && docker-compose -f docker-compose.user-only.yml build",
    "docker:test:restart": "cd ../ && docker-compose -f docker-compose.user-only.yml restart user-service",
    "docker:local:up": "docker-compose up -d",
    "docker:local:down": "docker-compose down",
    "docker:local:logs": "docker-compose logs -f user-service",
    "docker:local:build": "docker-compose build",
    "docker:local:restart": "docker-compose restart user-service",
    "test:redis": "ts-node -r tsconfig-paths/register scripts/test-redis.ts",
    "security:audit": "node scripts/security-audit.js",
    "security:audit:prod": "node scripts/security-audit.js --env-file .env.docker",
    "security:audit:test": "node scripts/security-audit.js --env-file .env.test",
    "security:generate-keys": "node scripts/generate-api-keys.js development",
    "security:generate-keys:prod": "node scripts/generate-api-keys.js production --output-file",
    "security:generate-keys:staging": "node scripts/generate-api-keys.js staging --output-file",
    "security:test": "npm run security:audit && npm run test -- --testPathPatterns=internal-service.guard.spec.ts",
    "ci:test": "npm run lint && npm run test -- --passWithNoTests --ci --coverage=false --maxWorkers=2 --forceExit --detectOpenHandles --testTimeout=30000",
    "ci:test:integration": "cross-env NODE_ENV=test npm run test:e2e -- --passWithNoTests --ci --testTimeout=30000 --forceExit --detectOpenHandles",
    "ci:build": "npm run build",
    "ci:docker:build": "docker build -t user-service-ci .",
    "ci:docker:test": "cd ../ && docker-compose -f docker-compose.user-only.yml up -d && sleep 30 && curl -f http://localhost:3002/health && docker-compose -f docker-compose.user-only.yml down -v",
    "dev:setup": "npm run docker:test:up && sleep 30 && npm run migration:run",
    "dev:teardown": "npm run docker:test:down",
    "dev:full:setup": "cd ../ && docker-compose up -d postgres-user redis && sleep 30 && cd user-service && npm run migration:run",
    "dev:full:up": "cd ../ && docker-compose up -d",
    "dev:full:down": "cd ../ && docker-compose down",
    "dev:full:logs": "cd ../ && docker-compose logs -f user-service",
    "dev:full:restart": "cd ../ && docker-compose restart user-service",
    "dev:full:build": "cd ../ && docker-compose build user-service",
    "dev:full:status": "cd ../ && docker-compose ps",
    "dev:deps:up": "cd ../ && docker-compose up -d postgres-user redis",
    "dev:deps:down": "cd ../ && docker-compose stop postgres-user redis",
    "dev:deps:status": "cd ../ && docker-compose ps postgres-user redis",
    "dev:with-auth": "cd ../ && docker-compose up -d postgres-user postgres-auth redis auth-service user-service",
    "dev:with-monitoring": "cd ../ && docker-compose up -d postgres-user redis prometheus grafana user-service",
    "dev:with-logging": "cd ../ && docker-compose up -d postgres-user redis elasticsearch kibana logstash user-service",
    "dev:minimal": "cd ../ && docker-compose up -d postgres-user redis user-service",
    "migration:create": "npm run typeorm -- migration:create src/database/migrations/$npm_config_name",
    "migration:show": "npm run typeorm -- migration:show",
    "migration:status": "npm run typeorm -- query \"SELECT * FROM migrations ORDER BY timestamp DESC LIMIT 10\"",
    "db:seed": "ts-node -r tsconfig-paths/register scripts/seed-database.ts",
    "db:reset": "npm run migration:revert && npm run migration:run && npm run db:seed",
    "db:backup": "ts-node -r tsconfig-paths/register scripts/backup-database.ts",
    "db:restore": "ts-node -r tsconfig-paths/register scripts/restore-database.ts",
    "monitoring:metrics": "curl -s http://localhost:3002/metrics | grep user_service",
    "monitoring:health": "curl -s http://localhost:3002/health | jq",
    "monitoring:logs": "cd ../ && docker-compose logs -f user-service | grep -E '(ERROR|WARN|INFO)'",
    "debug:redis": "cd ../ && docker-compose exec redis redis-cli -a redis_password",
    "debug:postgres": "cd ../ && docker-compose exec postgres-user psql -U user_service -d user_db",
    "debug:container": "cd ../ && docker-compose exec user-service sh",
    "debug:network": "cd ../ && docker network inspect backend_microservices-network",
    "debug:volumes": "cd ../ && docker volume ls | grep backend",
    "perf:load-test": "ts-node -r tsconfig-paths/register scripts/load-test.ts",
    "perf:memory": "cd ../ && docker stats user-service --no-stream",
    "perf:profile": "npm run start:debug -- --inspect=0.0.0.0:9229",
    "perf:test:all": "ts-node -r tsconfig-paths/register scripts/run-performance-tests.ts",
    "perf:test:batch": "npm run test:e2e -- --testPathPattern=performance-batch-operations.e2e-spec.ts --testTimeout=600000",
    "perf:test:concurrent": "npm run test:e2e -- --testPathPattern=load-test-concurrent-users.e2e-spec.ts --testTimeout=900000",
    "perf:test:cache": "npm run test:e2e -- --testPathPattern=performance-cache-database.e2e-spec.ts --testTimeout=600000",
    "perf:test:memory": "npm run test:e2e -- --testPathPattern=performance-memory-resource.e2e-spec.ts --testTimeout=1200000",
    "perf:test:advanced": "node load-test/advanced-performance-test.js",
    "perf:test:k6": "k6 run load-test/k6-load-test.js",
    "perf:test:artillery": "artillery run load-test/artillery-load-test.yml",
    "perf:report": "open performance-reports/performance-report-*.html || start performance-reports/performance-report-*.html || xdg-open performance-reports/performance-report-*.html"
  },
  "dependencies": {
    "@nestjs/axios": "^4.0.1",
    "@nestjs/cache-manager": "^3.0.1",
    "@nestjs/common": "^11.0.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/platform-express": "^11.0.1",
    "@nestjs/schedule": "^6.0.1",
    "@nestjs/swagger": "^11.2.0",
    "@nestjs/terminus": "^11.0.0",
    "@nestjs/throttler": "^6.4.0",
    "@nestjs/typeorm": "^11.0.0",
    "@types/ioredis": "^4.28.10",
    "@types/multer": "^2.0.0",
    "@willsoto/nestjs-prometheus": "^6.0.2",
    "axios": "^1.7.9",
    "cache-manager": "^6.1.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "dotenv": "^17.2.2",
    "ioredis": "^5.8.2",
    "joi": "^18.0.1",
    "keyv": "^5.1.0",
    "multer": "^2.0.2",
    "nest-winston": "^1.10.2",
    "pg": "^8.16.3",
    "prom-client": "^15.1.3",
    "redis": "^4.7.0",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1",
    "typeorm": "^0.3.26",
    "uuid": "^13.0.0",
    "winston": "^3.17.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@types/express": "^5.0.0",
    "@types/jest": "^30.0.0",
    "@types/joi": "^17.2.2",
    "@types/node": "^22.18.1",
    "@types/supertest": "^6.0.2",
    "@types/uuid": "^10.0.0",
    "cross-env": "^10.1.0",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^30.0.0",
    "prettier": "^3.4.2",
    "source-map-support": "^0.5.21",
    "sqlite3": "^5.1.7",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": "src",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "../coverage",
    "testEnvironment": "node",
    "transformIgnorePatterns": [
      "node_modules/(?!(uuid|@nestjs)/)"
    ],
    "moduleNameMapping": {
      "uuid": "uuid"
    },
    "setupFilesAfterEnv": [
      "<rootDir>/../test/setup-e2e.ts"
    ],
    "testTimeout": 30000,
    "forceExit": true,
    "detectOpenHandles": true
  }
}
