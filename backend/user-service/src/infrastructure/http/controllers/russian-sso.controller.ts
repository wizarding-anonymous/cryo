import { Controller, Post, Body, Param, Get, UseGuards, HttpCode, HttpStatus } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiBearerAuth } from '@nestjs/swagger';
import { CorporateSSOService, SSOConfiguration } from '../../../application/services/corporate-sso.service';
import { RussianSSOService } from '../../../application/services/russian-sso.service';
import { JwtAuthGuard } from '../../auth/jwt-auth.guard';
import { RolesGuard } from '../../auth/roles.guard';
import { Roles } from '../../auth/roles.decorator';

class ConfigureRussianSSODto {
  provider: 'gosuslugi' | 'yandex_id' | 'vk_id' | 'sber_id' | 'my_team' | 'astra_linux_ad';
  clientId: string;
  clientSecret: string;
  domain?: string;
  organizationId?: string;
  serviceId?: string;
  certPath?: string;
  keyPath?: string;
  redirectUri: string;
  scopes: string[];
}

class RussianSSOLoginDto {
  ssoToken: string;
  provider: 'gosuslugi' | 'yandex_id' | 'vk_id' | 'sber_id' | 'my_team' | 'astra_linux_ad';
}

@ApiTags('üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–µ SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã')
@Controller('corporate/russian-sso')
@UseGuards(JwtAuthGuard, RolesGuard)
@ApiBearerAuth()
export class RussianSSOController {
  constructor(
    private readonly corporateSSOService: CorporateSSOService,
    private readonly russianSSOService: RussianSSOService,
  ) {}

  @Post(':corporateId/configure')
  @Roles('corporate_admin')
  @ApiOperation({
    summary: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞',
    description:
      '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏: –ì–æ—Å—É—Å–ª—É–≥–∏, –Ø–Ω–¥–µ–∫—Å ID, VK ID, –°–±–µ—Ä ID, MyTeam, Astra Linux AD',
  })
  @ApiResponse({ status: 200, description: 'SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' })
  @ApiResponse({ status: 400, description: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏' })
  @ApiResponse({ status: 404, description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
  async configureRussianSSO(
    @Param('corporateId') corporateId: string,
    @Body() configDto: ConfigureRussianSSODto,
  ): Promise<{ message: string }> {
    const ssoConfig: SSOConfiguration = {
      provider: configDto.provider,
      clientId: configDto.clientId,
      clientSecret: configDto.clientSecret,
      domain: configDto.domain,
      organizationId: configDto.organizationId,
      serviceId: configDto.serviceId,
      certPath: configDto.certPath,
      keyPath: configDto.keyPath,
      redirectUri: configDto.redirectUri,
      scopes: configDto.scopes,
    };

    await this.corporateSSOService.configureSSOProvider(corporateId, ssoConfig);

    return {
      message: `–†–æ—Å—Å–∏–π—Å–∫–∏–π SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${configDto.provider} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è ${corporateId}`,
    };
  }

  @Post(':corporateId/login')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({
    summary: '–í—Ö–æ–¥ —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π SSO',
    description: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã',
  })
  @ApiResponse({
    status: 200,
    description: '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
    schema: {
      type: 'object',
      properties: {
        user: { type: 'object' },
        accessToken: { type: 'string' },
        refreshToken: { type: 'string' },
        provider: { type: 'string' },
      },
    },
  })
  @ApiResponse({ status: 401, description: '–ù–µ–≤–µ—Ä–Ω—ã–π SSO —Ç–æ–∫–µ–Ω' })
  @ApiResponse({ status: 404, description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ SSO –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' })
  async loginWithRussianSSO(
    @Param('corporateId') corporateId: string,
    @Body() loginDto: RussianSSOLoginDto,
  ): Promise<{
    user: any;
    accessToken: string;
    refreshToken: string;
    provider: string;
  }> {
    const result = await this.corporateSSOService.authenticateWithSSO(corporateId, loginDto.ssoToken);

    return {
      user: {
        id: result.user.id,
        email: result.user.email,
        username: result.user.username,
        firstName: result.user.firstName,
        lastName: result.user.lastName,
      },
      accessToken: result.accessToken,
      refreshToken: result.refreshToken,
      provider: loginDto.provider,
    };
  }

  @Post(':corporateId/sync-users')
  @Roles('corporate_admin')
  @ApiOperation({
    summary: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ SSO',
    description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
  })
  @ApiResponse({
    status: 200,
    description: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
    schema: {
      type: 'object',
      properties: {
        synced: { type: 'number', description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
        errors: { type: 'array', items: { type: 'string' }, description: '–û—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' },
      },
    },
  })
  async syncUsersFromRussianSSO(
    @Param('corporateId') corporateId: string,
  ): Promise<{ synced: number; errors: string[] }> {
    return this.corporateSSOService.syncUsersFromSSO(corporateId);
  }

  @Get(':corporateId/providers')
  @Roles('corporate_admin', 'corporate_manager')
  @ApiOperation({
    summary: '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤',
    description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º',
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤',
    schema: {
      type: 'array',
      items: {
        type: 'object',
        properties: {
          id: { type: 'string' },
          name: { type: 'string' },
          description: { type: 'string' },
          features: { type: 'array', items: { type: 'string' } },
          requirements: { type: 'array', items: { type: 'string' } },
        },
      },
    },
  })
  async getRussianSSOProviders(): Promise<any[]> {
    return [
      {
        id: 'gosuslugi',
        name: '–ì–æ—Å—É—Å–ª—É–≥–∏',
        description: '–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ï–°–ò–ê)',
        features: [
          '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
          '–ì–û–°–¢-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è',
          '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è',
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–µ—Å—Ç—Ä–∞–º–∏',
        ],
        requirements: ['–ì–û–°–¢ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ï–°–ò–ê', '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏'],
      },
      {
        id: 'yandex_id',
        name: '–Ø–Ω–¥–µ–∫—Å ID',
        description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å–∞',
        features: [
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π',
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º',
          '–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
          '–ê—É–¥–∏—Ç –≤—Ö–æ–¥–æ–≤',
        ],
        requirements: ['–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ–º–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å–µ', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ OAuth –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
      },
      {
        id: 'vk_id',
        name: 'VK ID',
        description: '–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ VK –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
        features: [
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VK Teams',
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏',
          '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
          'API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        ],
        requirements: ['–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç VK', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
      },
      {
        id: 'sber_id',
        name: '–°–±–µ—Ä ID',
        description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞',
        features: [
          '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –°–±–µ—Ä–∞',
          '–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
          '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¶–ë –†–§',
        ],
        requirements: ['–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ –°–±–µ—Ä–æ–º', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
      },
      {
        id: 'my_team',
        name: 'MyTeam',
        description: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Mail.ru Group',
        features: [
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º',
          '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏',
          '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
          'API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
        ],
        requirements: ['–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç MyTeam', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'],
      },
      {
        id: 'astra_linux_ad',
        name: 'Astra Linux AD',
        description: 'Active Directory –¥–ª—è Astra Linux',
        features: [
          '–†–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',
          '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–°–¢–≠–ö',
          '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥–æ–º–µ–Ω–Ω—ã–º–∏ —Å–ª—É–∂–±–∞–º–∏',
          '–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏',
        ],
        requirements: ['Astra Linux —Å–µ—Ä–≤–µ—Ä', '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–º–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'],
      },
    ];
  }

  @Post(':corporateId/disable')
  @Roles('corporate_admin')
  @ApiOperation({
    summary: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ SSO',
    description: '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–æ—Å—Å–∏–π—Å–∫–∏–º SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º',
  })
  @ApiResponse({ status: 200, description: 'SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω' })
  async disableRussianSSO(@Param('corporateId') corporateId: string): Promise<{ message: string }> {
    await this.corporateSSOService.disableSSOProvider(corporateId);
    return { message: '–†–æ—Å—Å–∏–π—Å–∫–∏–π SSO –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω' };
  }
}
