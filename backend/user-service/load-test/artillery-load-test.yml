config:
  target: 'http://localhost:3001'
  phases:
    # Warm up phase
    - duration: 60
      arrivalRate: 10
      name: "Warm up"
    
    # Ramp up phase
    - duration: 120
      arrivalRate: 50
      rampTo: 100
      name: "Ramp up to 100 users/sec"
    
    # Sustained load phase
    - duration: 300
      arrivalRate: 100
      name: "Sustained load - 100 users/sec"
    
    # Peak load phase
    - duration: 180
      arrivalRate: 100
      rampTo: 500
      name: "Ramp up to 500 users/sec"
    
    # Maximum load phase
    - duration: 300
      arrivalRate: 500
      name: "Peak load - 500 users/sec"
    
    # Stress test phase
    - duration: 180
      arrivalRate: 500
      rampTo: 1000
      name: "Stress test - ramp to 1000 users/sec"
    
    # Maximum stress phase
    - duration: 600
      arrivalRate: 1000
      name: "Maximum stress - 1000 users/sec"
    
    # Cool down phase
    - duration: 120
      arrivalRate: 1000
      rampTo: 0
      name: "Cool down"

  # Performance thresholds
  ensure:
    p95: 200  # 95th percentile response time should be under 200ms
    p99: 500  # 99th percentile response time should be under 500ms
    maxErrorRate: 1  # Error rate should be under 1%

  # HTTP configuration
  http:
    timeout: 10
    pool: 50

  # Variables for test data
  variables:
    userCount: 1000

  # Plugins for enhanced reporting
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
    
scenarios:
  # Main user flow scenario (70% of traffic)
  - name: "User Registration and Authentication Flow"
    weight: 70
    flow:
      - post:
          url: "/api/auth/register"
          headers:
            Content-Type: "application/json"
          json:
            email: "user{{ $randomInt(1, 10000) }}@example.com"
            password: "TestPassword123!"
            name: "Test User {{ $randomInt(1, 1000) }}"
          capture:
            - json: "$.access_token"
              as: "accessToken"
          expect:
            - statusCode: 201
            - hasProperty: "access_token"
      
      - post:
          url: "/api/auth/login"
          headers:
            Content-Type: "application/json"
          json:
            email: "user{{ $randomInt(1, 10000) }}@example.com"
            password: "TestPassword123!"
          capture:
            - json: "$.access_token"
              as: "loginToken"
          expect:
            - statusCode: [200, 201]
            - hasProperty: "access_token"
      
      - get:
          url: "/api/users/profile"
          headers:
            Authorization: "Bearer {{ loginToken }}"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "email"
      
      - put:
          url: "/api/users/profile"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{ loginToken }}"
          json:
            name: "Updated User {{ $randomInt(1, 1000) }}"
          expect:
            - statusCode: 200
            - hasProperty: "name"

  # Health check scenario (20% of traffic)
  - name: "Health Check Monitoring"
    weight: 20
    flow:
      - get:
          url: "/api/health"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - contentType: json

  # Metrics endpoint scenario (10% of traffic)
  - name: "Metrics Monitoring"
    weight: 10
    flow:
      - get:
          url: "/metrics"
          expect:
            - statusCode: 200
            - contentType: text/plain