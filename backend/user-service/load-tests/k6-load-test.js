import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
const errorRate = new Rate('errors');
const responseTime = new Trend('response_time');
const requestCount = new Counter('requests');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const options = {
  stages: [
    // –†–∞–∑–æ–≥—Ä–µ–≤
    { duration: '2m', target: 100 },    // –†–∞–∑–æ–≥—Ä–µ–≤ –¥–æ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 2 –º–∏–Ω—É—Ç—ã
    { duration: '5m', target: 1000 },   // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 5 –º–∏–Ω—É—Ç
    { duration: '10m', target: 5000 },  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 5000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ 10 –º–∏–Ω—É—Ç
    { duration: '15m', target: 10000 }, // –ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ 10000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 15 –º–∏–Ω—É—Ç
    { duration: '5m', target: 5000 },   // –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 5000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '5m', target: 1000 },   // –°–Ω–∏–∂–µ–Ω–∏–µ –¥–æ 1000 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    { duration: '2m', target: 0 },      // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  ],
  thresholds: {
    // –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    http_req_duration: ['p(95)<500'], // 95% –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 500–º—Å
    http_req_failed: ['rate<0.05'],   // –ú–µ–Ω–µ–µ 5% –æ—à–∏–±–æ–∫
    errors: ['rate<0.05'],            // –ú–µ–Ω–µ–µ 5% –æ—à–∏–±–æ–∫ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ
    response_time: ['p(99)<1000'],    // 99% –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
  },
};

const BASE_URL = __ENV.BASE_URL || 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUsers = [
  { email: 'user1@example.com', username: 'user1', password: 'Password123!' },
  { email: 'user2@example.com', username: 'user2', password: 'Password123!' },
  { email: 'user3@example.com', username: 'user3', password: 'Password123!' },
];

export default function () {
  const startTime = Date.now();
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const scenario = Math.random();
  
  if (scenario < 0.4) {
    // 40% - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    testAuthentication();
  } else if (scenario < 0.7) {
    // 30% - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π
    testProfileOperations();
  } else if (scenario < 0.85) {
    // 15% - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    testSystemEndpoints();
  } else {
    // 15% - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    testIntegrations();
  }
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  const duration = Date.now() - startTime;
  responseTime.add(duration);
  requestCount.add(1);
  
  // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
  sleep(Math.random() * 2);
}

function testAuthentication() {
  const user = testUsers[Math.floor(Math.random() * testUsers.length)];
  
  // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
  const registerResponse = http.post(`${BASE_URL}/auth/register`, JSON.stringify({
    email: `test_${Date.now()}_${Math.random()}@example.com`,
    username: `user_${Date.now()}_${Math.random()}`,
    password: 'Password123!',
  }), {
    headers: { 'Content-Type': 'application/json' },
  });
  
  const registerSuccess = check(registerResponse, {
    'registration status is 201 or 409': (r) => r.status === 201 || r.status === 409,
    'registration response time < 1000ms': (r) => r.timings.duration < 1000,
  });
  
  if (!registerSuccess) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
  const loginResponse = http.post(`${BASE_URL}/auth/login`, JSON.stringify({
    email: user.email,
    password: user.password,
  }), {
    headers: { 'Content-Type': 'application/json' },
  });
  
  const loginSuccess = check(loginResponse, {
    'login status is 200 or 401': (r) => r.status === 200 || r.status === 401,
    'login response time < 500ms': (r) => r.timings.duration < 500,
  });
  
  if (!loginSuccess) {
    errorRate.add(1);
  }
}

function testProfileOperations() {
  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const profileResponse = http.get(`${BASE_URL}/users/profile`, {
    headers: {
      'Authorization': 'Bearer fake-token-for-load-test',
    },
  });
  
  const profileSuccess = check(profileResponse, {
    'profile status is 200 or 401': (r) => r.status === 200 || r.status === 401,
    'profile response time < 300ms': (r) => r.timings.duration < 300,
  });
  
  if (!profileSuccess) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const updateResponse = http.put(`${BASE_URL}/users/profile`, JSON.stringify({
    displayName: `User ${Date.now()}`,
    bio: 'Load test user',
  }), {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer fake-token-for-load-test',
    },
  });
  
  const updateSuccess = check(updateResponse, {
    'update status is 200 or 401': (r) => r.status === 200 || r.status === 401,
    'update response time < 500ms': (r) => r.timings.duration < 500,
  });
  
  if (!updateSuccess) {
    errorRate.add(1);
  }
}

function testSystemEndpoints() {
  // –¢–µ—Å—Ç health check
  const healthResponse = http.get(`${BASE_URL}/health`);
  
  const healthSuccess = check(healthResponse, {
    'health status is 200': (r) => r.status === 200,
    'health response time < 100ms': (r) => r.timings.duration < 100,
    'health response contains status': (r) => r.json('status') !== undefined,
  });
  
  if (!healthSuccess) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
  const metricsResponse = http.get(`${BASE_URL}/metrics`);
  
  const metricsSuccess = check(metricsResponse, {
    'metrics status is 200': (r) => r.status === 200,
    'metrics response time < 200ms': (r) => r.timings.duration < 200,
    'metrics response is not empty': (r) => r.body.length > 0,
  });
  
  if (!metricsSuccess) {
    errorRate.add(1);
  }
}

function testIntegrations() {
  // –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
  const integrationResponse = http.get(`${BASE_URL}/integration-monitoring/health`);
  
  const integrationSuccess = check(integrationResponse, {
    'integration status is 200': (r) => r.status === 200,
    'integration response time < 300ms': (r) => r.timings.duration < 300,
  });
  
  if (!integrationSuccess) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
  const reputationResponse = http.get(`${BASE_URL}/reputation/leaderboard`);
  
  const reputationSuccess = check(reputationResponse, {
    'reputation status is 200': (r) => r.status === 200,
    'reputation response time < 400ms': (r) => r.timings.duration < 400,
  });
  
  if (!reputationSuccess) {
    errorRate.add(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
export function handleSummary(data) {
  return {
    'load-test-results.json': JSON.stringify(data, null, 2),
    stdout: `
üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø USER SERVICE

üéØ –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
   ‚Ä¢ 50,000 RPS –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —á—Ç–µ–Ω–∏—è
   ‚Ä¢ 10,000 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   ‚Ä¢ 95% –∑–∞–ø—Ä–æ—Å–æ–≤ < 500ms
   ‚Ä¢ < 5% –æ—à–∏–±–æ–∫

üìà –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${data.metrics.http_reqs.count}
   ‚Ä¢ RPS (—Å—Ä–µ–¥–Ω–∏–π): ${Math.round(data.metrics.http_reqs.rate)}
   ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (95%): ${Math.round(data.metrics.http_req_duration.values['p(95)'])}ms
   ‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ (99%): ${Math.round(data.metrics.http_req_duration.values['p(99)'])}ms
   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: ${(data.metrics.http_req_failed.rate * 100).toFixed(2)}%
   ‚Ä¢ –ü–∏–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${data.metrics.vus_max.value}

‚úÖ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:
   ${data.metrics.http_req_duration.thresholds['p(95)<500'].ok ? '‚úÖ' : '‚ùå'} 95% –∑–∞–ø—Ä–æ—Å–æ–≤ < 500ms
   ${data.metrics.http_req_failed.thresholds['rate<0.05'].ok ? '‚úÖ' : '‚ùå'} –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ < 5%
   ${data.metrics.errors?.thresholds?.['rate<0.05']?.ok ? '‚úÖ' : '‚ùå'} –ö–∞—Å—Ç–æ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ < 5%

üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
   ${data.metrics.http_req_duration.values['p(95)'] > 500 ? '‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã' : '‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ'}
   ${data.metrics.http_req_failed.rate > 0.05 ? '‚Ä¢ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–æ–∫' : '‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ'}
   ${data.metrics.http_reqs.rate < 10000 ? '‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É' : '‚Ä¢ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞'}

üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ load-test-results.json
    `,
  };
}