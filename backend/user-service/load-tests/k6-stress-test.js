import http from 'k6/http';
import { check, sleep } from 'k6';
import { Rate, Trend, Counter } from 'k6/metrics';

// –ö–∞—Å—Ç–æ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è stress —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const errorRate = new Rate('stress_errors');
const responseTime = new Trend('stress_response_time');
const requestCount = new Counter('stress_requests');
const degradationPoint = new Counter('degradation_points');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è stress —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export const options = {
  stages: [
    // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏
    { duration: '2m', target: 1000 },   // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '5m', target: 5000 },   // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    { duration: '5m', target: 10000 },  // –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '5m', target: 20000 },  // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '5m', target: 30000 },  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '5m', target: 50000 },  // –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
    { duration: '10m', target: 50000 }, // –£–¥–µ—Ä–∂–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    { duration: '5m', target: 10000 },  // –°–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    { duration: '2m', target: 0 },      // –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  ],
  thresholds: {
    // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è stress —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    http_req_duration: ['p(95)<2000'],  // 95% –∑–∞–ø—Ä–æ—Å–æ–≤ –º–µ–Ω–µ–µ 2 —Å–µ–∫—É–Ω–¥
    http_req_failed: ['rate<0.20'],     // –ú–µ–Ω–µ–µ 20% –æ—à–∏–±–æ–∫ (–¥–æ–ø—É—Å–∫–∞–µ–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é)
    stress_errors: ['rate<0.30'],       // –ú–µ–Ω–µ–µ 30% –æ—à–∏–±–æ–∫ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ
  },
};

const BASE_URL = __ENV.BASE_URL || 'http://localhost:3001';

export default function () {
  const startTime = Date.now();
  
  // –í stress —Ç–µ—Å—Ç–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–∞–º—ã—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö
  const scenario = Math.random();
  
  if (scenario < 0.6) {
    // 60% - –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    stressTestAuthentication();
  } else if (scenario < 0.8) {
    // 20% - –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    stressTestProfiles();
  } else {
    // 20% - –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    stressTestSystem();
  }
  
  const duration = Date.now() - startTime;
  responseTime.add(duration);
  requestCount.add(1);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  if (duration > 1000) {
    degradationPoint.add(1);
  }
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è stress —Ç–µ—Å—Ç–∞
  sleep(0.1);
}

function stressTestAuthentication() {
  // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
  const loginResponse = http.post(`${BASE_URL}/auth/login`, JSON.stringify({
    email: `stress_user_${Math.floor(Math.random() * 1000)}@example.com`,
    password: 'Password123!',
  }), {
    headers: { 'Content-Type': 'application/json' },
    timeout: '5s', // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è stress —Ç–µ—Å—Ç–∞
  });
  
  const success = check(loginResponse, {
    'login completed (any status)': (r) => r.status !== 0, // –õ—é–±–æ–π HTTP —Å—Ç–∞—Ç—É—Å –ª—É—á—à–µ —Ç–∞–π–º–∞—É—Ç–∞
    'login response time < 5000ms': (r) => r.timings.duration < 5000,
  });
  
  if (!success || loginResponse.status === 0) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
  if (loginResponse.status === 200) {
    const validateResponse = http.get(`${BASE_URL}/auth/validate`, {
      headers: {
        'Authorization': 'Bearer fake-token',
      },
      timeout: '3s',
    });
    
    const validateSuccess = check(validateResponse, {
      'validate completed': (r) => r.status !== 0,
      'validate response time < 3000ms': (r) => r.timings.duration < 3000,
    });
    
    if (!validateSuccess) {
      errorRate.add(1);
    }
  }
}

function stressTestProfiles() {
  // –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
  const profileId = Math.floor(Math.random() * 10000);
  const profileResponse = http.get(`${BASE_URL}/users/${profileId}/profile`, {
    timeout: '3s',
  });
  
  const success = check(profileResponse, {
    'profile request completed': (r) => r.status !== 0,
    'profile response time < 3000ms': (r) => r.timings.duration < 3000,
  });
  
  if (!success) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
  const reputationResponse = http.get(`${BASE_URL}/reputation/user/${profileId}`, {
    timeout: '2s',
  });
  
  const reputationSuccess = check(reputationResponse, {
    'reputation request completed': (r) => r.status !== 0,
    'reputation response time < 2000ms': (r) => r.timings.duration < 2000,
  });
  
  if (!reputationSuccess) {
    errorRate.add(1);
  }
}

function stressTestSystem() {
  // –¢–µ—Å—Ç health check –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
  const healthResponse = http.get(`${BASE_URL}/health`, {
    timeout: '1s',
  });
  
  const healthSuccess = check(healthResponse, {
    'health check completed': (r) => r.status !== 0,
    'health response time < 1000ms': (r) => r.timings.duration < 1000,
  });
  
  if (!healthSuccess) {
    errorRate.add(1);
  }
  
  // –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
  const metricsResponse = http.get(`${BASE_URL}/metrics`, {
    timeout: '2s',
  });
  
  const metricsSuccess = check(metricsResponse, {
    'metrics request completed': (r) => r.status !== 0,
    'metrics response time < 2000ms': (r) => r.timings.duration < 2000,
  });
  
  if (!metricsSuccess) {
    errorRate.add(1);
  }
}

export function handleSummary(data) {
  const maxVUs = data.metrics.vus_max.value;
  const avgResponseTime = data.metrics.http_req_duration.values.avg;
  const p95ResponseTime = data.metrics.http_req_duration.values['p(95)'];
  const p99ResponseTime = data.metrics.http_req_duration.values['p(99)'];
  const errorRate = data.metrics.http_req_failed.rate * 100;
  const totalRequests = data.metrics.http_reqs.count;
  const avgRPS = data.metrics.http_reqs.rate;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫—É –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
  let degradationAnalysis = '';
  if (p95ResponseTime > 2000) {
    degradationAnalysis = 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ï–ì–†–ê–î–ê–¶–ò–Ø: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 —Å–µ–∫—É–Ω–¥—ã';
  } else if (p95ResponseTime > 1000) {
    degradationAnalysis = 'üü° –£–ú–ï–†–ï–ù–ù–ê–Ø –î–ï–ì–†–ê–î–ê–¶–ò–Ø: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –¥–æ 1+ —Å–µ–∫—É–Ω–¥';
  } else if (p95ResponseTime > 500) {
    degradationAnalysis = 'üü† –õ–ï–ì–ö–ê–Ø –î–ï–ì–†–ê–î–ê–¶–ò–Ø: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å –¥–æ 500+ –º—Å';
  } else {
    degradationAnalysis = 'üü¢ –ë–ï–ó –î–ï–ì–†–ê–î–ê–¶–ò–ò: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ';
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é
  let scalingRecommendations = '';
  if (errorRate > 20) {
    scalingRecommendations = '‚Ä¢ –ö–†–ò–¢–ò–ß–ù–û: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ';
  } else if (errorRate > 10) {
    scalingRecommendations = '‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –Ω–∞ 50%\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î';
  } else if (p95ResponseTime > 1000) {
    scalingRecommendations = '‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å CDN –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
  } else {
    scalingRecommendations = '‚Ä¢ –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π\n‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ç—Ä–∞—Ñ–∏–∫–∞';
  }

  return {
    'stress-test-results.json': JSON.stringify(data, null, 2),
    stdout: `
üî• –†–ï–ó–£–õ–¨–¢–ê–¢–´ STRESS –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø USER SERVICE

üéØ –¶–µ–ª—å stress —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
   ‚Ä¢ –ù–∞–π—Ç–∏ —Ç–æ—á–∫—É –æ—Ç–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º—ã
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å graceful degradation
   ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
   ‚Ä¢ –í—ã—è–≤–∏—Ç—å —É–∑–∫–∏–µ –º–µ—Å—Ç–∞

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–∫–∏:
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${maxVUs}
   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${totalRequests}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π RPS: ${Math.round(avgRPS)}
   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫: ${errorRate.toFixed(2)}%

‚è±Ô∏è –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${Math.round(avgResponseTime)}ms
   ‚Ä¢ 95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${Math.round(p95ResponseTime)}ms
   ‚Ä¢ 99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${Math.round(p99ResponseTime)}ms

${degradationAnalysis}

üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é:
${scalingRecommendations}

üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:
   ‚Ä¢ –ü–∏–∫–æ–≤—ã–π RPS: ${Math.round(avgRPS)}
   ‚Ä¢ –¶–µ–ª–µ–≤–æ–π RPS (50K): ${avgRPS >= 50000 ? '‚úÖ –î–û–°–¢–ò–ì–ù–£–¢' : '‚ùå –ù–ï –î–û–°–¢–ò–ì–ù–£–¢'}
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: ${Math.round(avgRPS * 0.7)} RPS (70% –æ—Ç –ø–∏–∫–∞)

üõ°Ô∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:
   ${errorRate < 5 ? '‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø' : errorRate < 15 ? 'üü° –•–û–†–û–®–ê–Ø' : errorRate < 30 ? 'üü† –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–ê–Ø' : 'üî¥ –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø'}

üìù –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ stress-test-results.json
    `,
  };
}