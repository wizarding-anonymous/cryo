#!/usr/bin/env ts-node

/**
 * Staging Validation Script for User Service
 *
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é User Service –≤ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏:
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ health checks
 * 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Auth Service –∏ –¥—Ä—É–≥–∏–º–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏
 * 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º Redis –∏ PostgreSQL
 * 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

import axios from 'axios';
import { performance } from 'perf_hooks';

interface ValidationResult {
  test: string;
  status: 'PASS' | 'FAIL' | 'WARN';
  message: string;
  duration?: number;
  details?: unknown;
}

class StagingValidator {
  private baseUrl: string;
  private results: ValidationResult[] = [];

  constructor(baseUrl = 'http://localhost:3002') {
    this.baseUrl = baseUrl;
  }

  private async addResult(
    test: string,
    status: 'PASS' | 'FAIL' | 'WARN',
    message: string,
    details?: unknown,
    duration?: number,
  ) {
    this.results.push({ test, status, message, details, duration });
    const emoji = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
    const durationStr = duration ? ` (${duration.toFixed(2)}ms)` : '';
    console.log(`${emoji} ${test}: ${message}${durationStr}`);
  }

  private async makeRequest(url: string, options: Record<string, unknown> = {}) {
    const start = performance.now();
    try {
      const response = await axios({
        url,
        timeout: 10000,
        ...options,
      });
      const duration = performance.now() - start;
      return { response, duration };
    } catch (error) {
      const duration = performance.now() - start;
      throw { error, duration };
    }
  }

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ health checks
  async validateDeployment() {
    console.log('\nüöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è User Service...\n');

    // Health check - liveness
    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/api/health/live`);
      await this.addResult(
        'Health Check - Liveness',
        'PASS',
        '–°–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ liveness probe',
        response.data,
        duration
      );
    } catch ({ error, duration }) {
      await this.addResult(
        'Health Check - Liveness',
        'FAIL',
        `–°–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${error.message}`,
        error.response?.data,
        duration
      );
      return false;
    }

    // Health check - readiness
    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/api/health/ready`);
      const healthData = response.data;
      
      if (healthData.status === 'ok') {
        await this.addResult(
          'Health Check - Readiness',
          'PASS',
          '–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã',
          healthData,
          duration
        );
      } else {
        await this.addResult(
          'Health Check - Readiness',
          'WARN',
          '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
          healthData,
          duration
        );
      }
    } catch ({ error, duration }) {
      await this.addResult(
        'Health Check - Readiness',
        'FAIL',
        `–û—à–∏–±–∫–∞ readiness probe: ${error.message}`,
        error.response?.data,
        duration
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/metrics`);
      const metricsText = response.data;
      
      if (metricsText.includes('user_service_') && metricsText.includes('nodejs_')) {
        await this.addResult(
          'Prometheus Metrics',
          'PASS',
          '–ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
          { metricsCount: metricsText.split('\n').length },
          duration
        );
      } else {
        await this.addResult(
          'Prometheus Metrics',
          'WARN',
          '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
          null,
          duration
        );
      }
    } catch ({ error, duration }) {
      await this.addResult(
        'Prometheus Metrics',
        'FAIL',
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${error.message}`,
        null,
        duration
      );
    }

    return true;
  }

  // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Auth Service
  async validateAuthServiceIntegration() {
    console.log('\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Auth Service...\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
    const testUser = {
      email: `staging-test-${Date.now()}@example.com`,
      password: 'hashed_password_from_auth_service',
      name: 'Staging Test User'
    };

    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/api/internal/users`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': 'auth-service-staging-key-32chars',
          'x-internal-service': 'auth-service'
        },
        data: testUser
      });

      const createdUser = response.data.data;
      await this.addResult(
        'Auth Service - User Creation',
        'PASS',
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API',
        { userId: createdUser.id },
        duration
      );

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
      try {
        const { response: getUserResponse, duration: getUserDuration } = await this.makeRequest(
          `${this.baseUrl}/api/internal/users/email/${testUser.email}`,
          {
            headers: {
              'x-api-key': 'auth-service-staging-key-32chars',
              'x-internal-service': 'auth-service'
            }
          }
        );

        await this.addResult(
          'Auth Service - User Lookup',
          'PASS',
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ email',
          { userId: getUserResponse.data.data.id },
          getUserDuration
        );
      } catch ({ error, duration }) {
        await this.addResult(
          'Auth Service - User Lookup',
          'FAIL',
          `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
          null,
          duration
        );
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastLoginAt
      try {
        const { response: updateResponse, duration: updateDuration } = await this.makeRequest(
          `${this.baseUrl}/api/internal/users/${createdUser.id}/last-login`,
          {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'x-api-key': 'auth-service-staging-key-32chars',
              'x-internal-service': 'auth-service'
            },
            data: { lastLoginAt: new Date().toISOString() }
          }
        );

        await this.addResult(
          'Auth Service - Last Login Update',
          'PASS',
          '–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
          null,
          updateDuration
        );
      } catch ({ error, duration }) {
        await this.addResult(
          'Auth Service - Last Login Update',
          'FAIL',
          `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è lastLoginAt: ${error.message}`,
          null,
          duration
        );
      }

      return createdUser.id;
    } catch ({ error, duration }) {
      await this.addResult(
        'Auth Service - User Creation',
        'FAIL',
        `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`,
        error.response?.data,
        duration
      );
      return null;
    }
  }

  // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏
  async validateMicroservicesIntegration(userId: string) {
    console.log('\nüéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏...\n');

    // Game Catalog Service - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
      const { response, duration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/users/${userId}/profile`,
        {
          headers: {
            'x-api-key': 'game-catalog-staging-key-32chars',
            'x-internal-service': 'game-catalog-service'
          }
        }
      );

      await this.addResult(
        'Game Catalog Integration',
        'PASS',
        '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω –¥–ª—è Game Catalog Service',
        null,
        duration
      );
    } catch ({ error, duration }) {
      await this.addResult(
        'Game Catalog Integration',
        'FAIL',
        `–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Game Catalog: ${error.message}`,
        null,
        duration
      );
    }

    // Payment Service - –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–ª–∏–Ω–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try {
      const { response, duration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/users/${userId}/billing-info`,
        {
          headers: {
            'x-api-key': 'payment-service-staging-key-32chars',
            'x-internal-service': 'payment-service'
          }
        }
      );

      await this.addResult(
        'Payment Service Integration',
        'PASS',
        '–ë–∏–ª–ª–∏–Ω–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è Payment Service',
        null,
        duration
      );
    } catch ({ error, duration }) {
      await this.addResult(
        'Payment Service Integration',
        'FAIL',
        `–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Payment Service: ${error.message}`,
        null,
        duration
      );
    }

    // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è Library Service
    try {
      const { response, duration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/batch/users/profiles`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'library-service-staging-key-32chars',
            'x-internal-service': 'library-service'
          },
          data: { userIds: [userId] }
        }
      );

      await this.addResult(
        'Library Service - Batch Operations',
        'PASS',
        'Batch –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è Library Service',
        null,
        duration
      );
    } catch ({ error, duration }) {
      await this.addResult(
        'Library Service - Batch Operations',
        'FAIL',
        `–û—à–∏–±–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–∏: ${error.message}`,
        null,
        duration
      );
    }
  }

  // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–∏–º Redis –∏ PostgreSQL
  async validateSharedInfrastructure() {
    console.log('\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –æ–±—â–µ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...\n');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è Redis
    const testCacheKey = `staging-test-${Date.now()}`;
    const testCacheValue = { test: 'staging-validation', timestamp: new Date().toISOString() };

    try {
      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
      const testUser = {
        email: `cache-test-${Date.now()}@example.com`,
        password: 'hashed_password',
        name: 'Cache Test User'
      };

      const { response: createResponse, duration: createDuration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/users`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'auth-service-staging-key-32chars',
            'x-internal-service': 'auth-service'
          },
          data: testUser
        }
      );

      const userId = createResponse.data.data.id;

      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –ë–î
      const { response: firstResponse, duration: firstDuration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/users/${userId}`,
        {
          headers: {
            'x-api-key': 'auth-service-staging-key-32chars',
            'x-internal-service': 'auth-service'
          }
        }
      );

      // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –∫—ç—à
      const { response: secondResponse, duration: secondDuration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/users/${userId}`,
        {
          headers: {
            'x-api-key': 'auth-service-staging-key-32chars',
            'x-internal-service': 'auth-service'
          }
        }
      );

      if (secondDuration < firstDuration * 0.8) {
        await this.addResult(
          'Redis Cache Performance',
          'PASS',
          `–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (${firstDuration.toFixed(2)}ms -> ${secondDuration.toFixed(2)}ms)`,
          { cacheImprovement: `${((firstDuration - secondDuration) / firstDuration * 100).toFixed(1)}%` }
        );
      } else {
        await this.addResult(
          'Redis Cache Performance',
          'WARN',
          '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ',
          { firstRequest: firstDuration, secondRequest: secondDuration }
        );
      }
    } catch ({ error, duration }) {
      await this.addResult(
        'Redis Cache Test',
        'FAIL',
        `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: ${error.message}`,
        null,
        duration
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞
    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/api/cache/stats`, {
        headers: {
          'x-api-key': 'auth-service-staging-key-32chars',
          'x-internal-service': 'auth-service'
        }
      });

      const cacheStats = response.data.data;
      await this.addResult(
        'Redis Cache Stats',
        'PASS',
        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–æ–ª—É—á–µ–Ω–∞',
        cacheStats,
        duration
      );
    } catch ({ error, duration }) {
      await this.addResult(
        'Redis Cache Stats',
        'WARN',
        '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞',
        null,
        duration
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/api/health`);
      const healthData = response.data;
      
      const dbStatus = healthData.info?.database?.status;
      if (dbStatus === 'up') {
        await this.addResult(
          'PostgreSQL Connection',
          'PASS',
          '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –∞–∫—Ç–∏–≤–Ω–æ',
          healthData.info.database,
          duration
        );
      } else {
        await this.addResult(
          'PostgreSQL Connection',
          'FAIL',
          '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL',
          healthData.error?.database,
          duration
        );
      }
    } catch ({ error, duration }) {
      await this.addResult(
        'PostgreSQL Connection',
        'FAIL',
        `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: ${error.message}`,
        null,
        duration
      );
    }
  }

  // 5. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  async validatePerformanceAndMonitoring() {
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...\n');

    // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const batchUsers = Array.from({ length: 100 }, (_, i) => ({
      email: `batch-test-${Date.now()}-${i}@example.com`,
      password: 'hashed_password',
      name: `Batch Test User ${i}`
    }));

    try {
      const { response, duration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/batch/users/create`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'auth-service-staging-key-32chars',
            'x-internal-service': 'auth-service'
          },
          data: { users: batchUsers }
        }
      );

      const throughput = batchUsers.length / (duration / 1000);
      if (throughput > 50) {
        await this.addResult(
          'Batch Operations Performance',
          'PASS',
          `–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å batch –æ–ø–µ—Ä–∞—Ü–∏–π (${throughput.toFixed(1)} users/sec)`,
          { usersCreated: batchUsers.length, throughput },
          duration
        );
      } else {
        await this.addResult(
          'Batch Operations Performance',
          'WARN',
          `–ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å batch –æ–ø–µ—Ä–∞—Ü–∏–π (${throughput.toFixed(1)} users/sec)`,
          { usersCreated: batchUsers.length, throughput },
          duration
        );
      }
    } catch ({ error, duration }) {
      await this.addResult(
        'Batch Operations Performance',
        'FAIL',
        `–û—à–∏–±–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–π: ${error.message}`,
        null,
        duration
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try {
      const { response, duration } = await this.makeRequest(`${this.baseUrl}/metrics`);
      const metricsText = response.data;
      
      const userMetrics = metricsText.split('\n').filter(line => 
        line.includes('user_operations_total') || 
        line.includes('user_cache_hits_total') ||
        line.includes('user_batch_operations_duration')
      );

      if (userMetrics.length > 0) {
        await this.addResult(
          'Performance Metrics',
          'PASS',
          '–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã',
          { metricsFound: userMetrics.length },
          duration
        );
      } else {
        await this.addResult(
          'Performance Metrics',
          'WARN',
          '–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
          null,
          duration
        );
      }
    } catch ({ error, duration }) {
      await this.addResult(
        'Performance Metrics',
        'FAIL',
        `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: ${error.message}`,
        null,
        duration
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const { response, duration } = await this.makeRequest(
        `${this.baseUrl}/api/internal/users/test-logging`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': 'auth-service-staging-key-32chars',
            'x-internal-service': 'auth-service'
          },
          data: { testMessage: 'Staging validation test' }
        }
      );

      await this.addResult(
        'Structured Logging',
        'PASS',
        '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        null,
        duration
      );
    } catch ({ error, duration }) {
      if (error.response?.status === 404) {
        await this.addResult(
          'Structured Logging',
          'WARN',
          '–¢–µ—Å—Ç–æ–≤—ã–π endpoint –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω',
          null,
          duration
        );
      } else {
        await this.addResult(
          'Structured Logging',
          'FAIL',
          `–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
          null,
          duration
        );
      }
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
  generateReport() {
    console.log('\nüìã –û–¢–ß–ï–¢ –í–ê–õ–ò–î–ê–¶–ò–ò STAGING –û–ö–†–£–ñ–ï–ù–ò–Ø\n');
    console.log('='.repeat(60));

    const passed = this.results.filter(r => r.status === 'PASS').length;
    const failed = this.results.filter(r => r.status === 'FAIL').length;
    const warnings = this.results.filter(r => r.status === 'WARN').length;
    const total = this.results.length;

    console.log(`\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
    console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${total}`);
    console.log(`   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings}/${total}`);

    const successRate = (passed / total * 100).toFixed(1);
    console.log(`   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);

    if (failed > 0) {
      console.log(`\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:`);
      this.results
        .filter(r => r.status === 'FAIL')
        .forEach(r => console.log(`   - ${r.test}: ${r.message}`));
    }

    if (warnings > 0) {
      console.log(`\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:`);
      this.results
        .filter(r => r.status === 'WARN')
        .forEach(r => console.log(`   - ${r.test}: ${r.message}`));
    }

    console.log('\n' + '='.repeat(60));

    if (failed === 0) {
      console.log('üéâ –í–ê–õ–ò–î–ê–¶–ò–Ø STAGING –û–ö–†–£–ñ–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!');
      console.log('‚úÖ User Service –≥–æ—Ç–æ–≤ –∫ production –¥–µ–ø–ª–æ—é');
    } else {
      console.log('üö® –í–ê–õ–ò–î–ê–¶–ò–Ø STAGING –û–ö–†–£–ñ–ï–ù–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê!');
      console.log('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ production –¥–µ–ø–ª–æ–µ–º');
    }

    return {
      success: failed === 0,
      stats: { passed, failed, warnings, total, successRate: parseFloat(successRate) },
      results: this.results
    };
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  async validate() {
    console.log('üöÄ –ù–ê–ß–ê–õ–û –í–ê–õ–ò–î–ê–¶–ò–ò USER SERVICE –í STAGING –û–ö–†–£–ñ–ï–ù–ò–ò');
    console.log('=' .repeat(60));

    const deploymentOk = await this.validateDeployment();
    if (!deploymentOk) {
      console.log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      return this.generateReport();
    }

    const userId = await this.validateAuthServiceIntegration();
    if (userId) {
      await this.validateMicroservicesIntegration(userId);
    }

    await this.validateSharedInfrastructure();
    await this.validatePerformanceAndMonitoring();

    return this.generateReport();
  }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async function main() {
  const baseUrl = process.env.USER_SERVICE_URL || 'http://localhost:3002';
  const validator = new StagingValidator(baseUrl);
  
  try {
    const result = await validator.validate();
    process.exit(result.success ? 0 : 1);
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

export { StagingValidator };