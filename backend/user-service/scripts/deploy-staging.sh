#!/bin/bash

# Bash script for deploying User Service to staging environment
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è User Service –≤ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏

set -e

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
SKIP_BUILD=false
SKIP_TESTS=false
SKIP_VALIDATION=false
FORCE=false

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --skip-build)
            SKIP_BUILD=true
            shift
            ;;
        --skip-tests)
            SKIP_TESTS=true
            shift
            ;;
        --skip-validation)
            SKIP_VALIDATION=true
            shift
            ;;
        --force)
            FORCE=true
            shift
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--skip-build] [--skip-tests] [--skip-validation] [--force]"
            exit 1
            ;;
    esac
done

echo "üöÄ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï USER SERVICE –í STAGING –û–ö–†–£–ñ–ï–ù–ò–ò"
echo "============================================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
echo ""
echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! command -v docker &> /dev/null || ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker –∏–ª–∏ Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    exit 1
fi
echo "‚úÖ Docker –∏ Docker Compose –¥–æ—Å—Ç—É–ø–Ω—ã"

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend
cd ..

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö staging –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö staging –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.staging.yml down -v --remove-orphans || echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã)"
echo "‚úÖ Staging –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞)
if [ "$SKIP_BUILD" = false ]; then
    echo ""
    echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # –°–±–æ—Ä–∫–∞ User Service
    docker-compose -f docker-compose.staging.yml build user-service
    
    # –°–±–æ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    docker-compose -f docker-compose.staging.yml build auth-service-staging
    docker-compose -f docker-compose.staging.yml build game-catalog-service-staging
    docker-compose -f docker-compose.staging.yml build payment-service-staging
    docker-compose -f docker-compose.staging.yml build security-service-staging
    
    echo "‚úÖ Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
else
    echo ""
    echo "‚è≠Ô∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ (--skip-build)"
fi

# –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, Redis)
echo ""
echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã..."
docker-compose -f docker-compose.staging.yml up -d \
    postgres-user-staging \
    postgres-auth-staging \
    postgres-catalog-staging \
    postgres-payment-staging \
    postgres-security-staging \
    redis-staging

echo "‚úÖ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (30 —Å–µ–∫—É–Ω–¥)..."
sleep 30

# –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π User Service
echo ""
echo "üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π User Service..."
cd user-service

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if [ ! -d "node_modules" ]; then
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm ci --legacy-peer-deps
fi

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
export NODE_ENV=staging
npm run migration:run
echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"

cd ..

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
echo ""
echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.staging.yml up -d
echo "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (60 —Å–µ–∫—É–Ω–¥)..."
sleep 60

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
echo ""
echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.staging.yml ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks
echo ""
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ health checks..."
MAX_ATTEMPTS=12
ATTEMPT=0

while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    ATTEMPT=$((ATTEMPT + 1))
    echo "–ü–æ–ø—ã—Ç–∫–∞ $ATTEMPT/$MAX_ATTEMPTS..."
    
    if curl -f -s http://localhost:3002/api/health/live > /dev/null 2>&1; then
        echo "‚úÖ User Service –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
        break
    fi
    
    if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
        echo "‚ùå User Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check –ø–æ—Å–ª–µ $MAX_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫"
        echo "üìã –õ–æ–≥–∏ User Service:"
        docker-compose -f docker-compose.staging.yml logs --tail=50 user-service
        exit 1
    fi
    
    sleep 10
done

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω—ã)
if [ "$SKIP_TESTS" = false ]; then
    echo ""
    echo "üß™ –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤..."
    cd user-service
    
    export NODE_ENV=test
    export USER_SERVICE_URL=http://localhost:3002
    
    if npm run test:integration; then
        echo "‚úÖ Integration —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå Integration —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        if [ "$FORCE" = false ]; then
            cd ..
            exit 1
        else
            echo "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–æ–≤ (--force)"
        fi
    fi
    
    cd ..
else
    echo ""
    echo "‚è≠Ô∏è –¢–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (--skip-tests)"
fi

# –í–∞–ª–∏–¥–∞—Ü–∏—è staging –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞)
if [ "$SKIP_VALIDATION" = false ]; then
    echo ""
    echo "‚úÖ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ staging –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    cd user-service
    
    export USER_SERVICE_URL=http://localhost:3002
    
    if npx ts-node -r tsconfig-paths/register scripts/validate-staging.ts; then
        echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è staging –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è staging –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞"
        if [ "$FORCE" = false ]; then
            cd ..
            exit 1
        else
            echo "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–≤–∞–ª –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (--force)"
        fi
    fi
    
    cd ..
else
    echo ""
    echo "‚è≠Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞ (--skip-validation)"
fi

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo ""
echo "üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
if docker-compose -f docker-compose.staging.yml up -d prometheus-staging grafana-staging; then
    echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω"
    echo "üìä Prometheus: http://localhost:9090"
    echo "üìà Grafana: http://localhost:3100 (admin/staging_admin)"
else
    echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
echo "üéâ STAGING –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
echo "============================================================"

echo ""
echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
echo "üîê User Service: http://localhost:3002/api"
echo "üìö API Docs: http://localhost:3002/api/api-docs"
echo "üè• Health Check: http://localhost:3002/api/health"
echo "üìä Metrics: http://localhost:3002/metrics"
echo "üîê Auth Service: http://localhost:3001"
echo "üéÆ Game Catalog: http://localhost:3003"
echo "üí≥ Payment Service: http://localhost:3006"
echo "üõ°Ô∏è Security Service: http://localhost:3010"

echo ""
echo "üóÑÔ∏è –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞:"
echo "üêò PostgreSQL User: localhost:5433"
echo "üêò PostgreSQL Auth: localhost:5432"
echo "üî¥ Redis: localhost:6379"
echo "üìä Prometheus: http://localhost:9090"
echo "üìà Grafana: http://localhost:3100"

echo ""
echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "üìã –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.staging.yml ps"
echo "üìú –õ–æ–≥–∏: docker-compose -f docker-compose.staging.yml logs -f user-service"
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.staging.yml down"
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.staging.yml restart user-service"

echo ""
echo "‚úÖ User Service –≥–æ—Ç–æ–≤ –∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≤ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏!"