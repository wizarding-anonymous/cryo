const axios = require('axios');

const BASE_URL = 'http://localhost:3001';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è axios
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 10000,
  validateStatus: function (status) {
    return status < 500; // –ù–µ –±—Ä–æ—Å–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ < 500
  }
});

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function logTest(testName, status, details = '') {
  const statusColor = status === 'PASS' ? colors.green : colors.red;
  const statusIcon = status === 'PASS' ? '‚úÖ' : '‚ùå';
  log(`${statusIcon} ${testName}`, statusColor);
  if (details) {
    log(`   ${details}`, colors.blue);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
let testUser = null;
let authToken = null;
let userId = null;

async function runTests() {
  log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ User Service —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤\n', colors.bold);

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint
    await testHealthEndpoint();
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    await testApiDocs();
    
    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await testUserRegistration();
    
    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await testUserLogin();
    
    // 4.1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞, –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É)
    await testUserActivation();
    
    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await testUserProfile();
    
    // 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–µ–π (—Ç—Ä–µ–±—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤)
    await testRoles();
    
    // 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    await testMetrics();
    
    // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
    await testIntegrationMonitoring();
    
    // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    await testCustomization();
    
    // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
    await testReputation();

    log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!', colors.green + colors.bold);
    
  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.red + colors.bold);
    process.exit(1);
  }
}

async function testHealthEndpoint() {
  try {
    const response = await api.get('/health');
    if (response.status === 200 && response.data.status === 'ok') {
      logTest('Health Check', 'PASS', `Status: ${response.data.status}`);
    } else {
      logTest('Health Check', 'FAIL', `Unexpected response: ${response.status}`);
    }
  } catch (error) {
    logTest('Health Check', 'FAIL', error.message);
  }
}

async function testApiDocs() {
  try {
    const response = await api.get('/api-docs');
    if (response.status === 200) {
      logTest('API Documentation', 'PASS', 'Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      logTest('API Documentation', 'FAIL', `Status: ${response.status}`);
    }
  } catch (error) {
    logTest('API Documentation', 'FAIL', error.message);
  }
}

async function testUserRegistration() {
  try {
    testUser = {
      email: `test.user.${Date.now()}@example.com`,
      username: `testuser${Date.now()}`,
      password: 'TestPassword123!',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    };

    const response = await api.post('/users/register', testUser);
    
    if (response.status === 201) {
      userId = response.data.user?.id;
      logTest('User Registration', 'PASS', `User ID: ${userId}`);
    } else {
      logTest('User Registration', 'FAIL', `Status: ${response.status}, Message: ${response.data?.message || 'Unknown error'}`);
    }
  } catch (error) {
    logTest('User Registration', 'FAIL', error.message);
  }
}

async function testUserLogin() {
  try {
    const loginData = {
      email: testUser.email,
      password: testUser.password
    };

    const response = await api.post('/auth/login', loginData);
    
    if (response.status === 200 && response.data.accessToken) {
      authToken = response.data.accessToken;
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      api.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;
      logTest('User Login', 'PASS', 'Access token –ø–æ–ª—É—á–µ–Ω');
    } else if (response.status === 401 && response.data?.message?.includes('inactive account')) {
      // –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      logTest('User Login (Inactive Account)', 'PASS', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    } else {
      logTest('User Login', 'FAIL', `Status: ${response.status}, Message: ${response.data?.message || 'No access token'}`);
    }
  } catch (error) {
    logTest('User Login', 'FAIL', error.message);
  }
}

async function testUserActivation() {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É)
    const response = await api.get('/auth/activate?token=invalid-token');
    
    if (response.status === 400) {
      logTest('User Activation (Invalid Token)', 'PASS', '–ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã');
    } else {
      logTest('User Activation (Invalid Token)', 'FAIL', `Unexpected status: ${response.status}`);
    }
  } catch (error) {
    logTest('User Activation (Invalid Token)', 'FAIL', error.message);
  }
}

async function testUserProfile() {
  try {
    if (!authToken) {
      logTest('User Profile Tests', 'SKIP', '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)');
      return;
    }

    // –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
    const privacyData = {
      showEmail: false,
      showProfile: true
    };

    const privacyResponse = await api.put('/profile/settings/privacy', privacyData);
    
    if (privacyResponse.status === 200) {
      logTest('Update Privacy Settings', 'PASS', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } else {
      logTest('Update Privacy Settings', 'FAIL', `Status: ${privacyResponse.status}`);
    }

    // –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationData = {
      emailNotifications: true,
      pushNotifications: false
    };

    const notificationResponse = await api.put('/profile/settings/notifications', notificationData);
    
    if (notificationResponse.status === 200) {
      logTest('Update Notification Settings', 'PASS', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    } else {
      logTest('Update Notification Settings', 'FAIL', `Status: ${notificationResponse.status}`);
    }
  } catch (error) {
    logTest('User Profile', 'FAIL', error.message);
  }
}

async function testRoles() {
  try {
    const response = await api.get('/admin/roles');
    
    // –û–∂–∏–¥–∞–µ–º 403 –∏–ª–∏ 401, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if (response.status === 403 || response.status === 401) {
      logTest('Roles Access Control', 'PASS', '–î–æ—Å—Ç—É–ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω');
    } else if (response.status === 200) {
      logTest('Roles Endpoint', 'PASS', `–ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: ${response.data?.length || 0}`);
    } else {
      logTest('Roles Endpoint', 'FAIL', `Unexpected status: ${response.status}`);
    }
  } catch (error) {
    logTest('Roles Endpoint', 'FAIL', error.message);
  }
}

async function testMetrics() {
  try {
    const response = await api.get('/metrics');
    
    if (response.status === 200) {
      logTest('Metrics Endpoint', 'PASS', '–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã');
    } else {
      logTest('Metrics Endpoint', 'FAIL', `Status: ${response.status}`);
    }
  } catch (error) {
    logTest('Metrics Endpoint', 'FAIL', error.message);
  }
}

async function testIntegrationMonitoring() {
  try {
    const response = await api.get('/integration-monitoring/health');
    
    if (response.status === 200) {
      logTest('Integration Health', 'PASS', '–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –ø–æ–ª—É—á–µ–Ω');
    } else {
      logTest('Integration Health', 'FAIL', `Status: ${response.status}`);
    }
  } catch (error) {
    logTest('Integration Health', 'FAIL', error.message);
  }
}

async function testCustomization() {
  try {
    if (!authToken) {
      logTest('Customization Tests', 'SKIP', '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)');
      return;
    }

    const response = await api.get('/users/customization/me');
    
    if (response.status === 200) {
      logTest('Get Customization', 'PASS', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã');
    } else {
      logTest('Get Customization', 'FAIL', `Status: ${response.status}`);
    }

    // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    const customizationData = {
      theme: {
        primaryColor: '#ff6b6b',
        darkMode: true
      }
    };

    const updateResponse = await api.put('/users/customization/me', customizationData);
    
    if (updateResponse.status === 200) {
      logTest('Update Customization', 'PASS', '–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } else {
      logTest('Update Customization', 'FAIL', `Status: ${updateResponse.status}`);
    }
  } catch (error) {
    logTest('Customization', 'FAIL', error.message);
  }
}

async function testReputation() {
  try {
    if (!authToken) {
      logTest('Reputation Tests', 'SKIP', '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)');
      return;
    }

    const response = await api.get('/reputation/user');
    
    if (response.status === 200) {
      logTest('Get User Reputation', 'PASS', `–†–µ–ø—É—Ç–∞—Ü–∏—è: ${response.data?.reputation || 0}`);
    } else {
      logTest('Get User Reputation', 'FAIL', `Status: ${response.status}`);
    }

    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const topResponse = await api.get('/reputation/top');
    
    if (topResponse.status === 200) {
      logTest('Get Top Users', 'PASS', `–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω`);
    } else {
      logTest('Get Top Users', 'FAIL', `Status: ${topResponse.status}`);
    }
  } catch (error) {
    logTest('Reputation', 'FAIL', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error);