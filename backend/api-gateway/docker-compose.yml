version: '3.8'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: api-gateway
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "cryo:gateway:"
      SERVICE_DEFAULT_TIMEOUT_MS: 5000
      SERVICE_DEFAULT_RETRIES: 1
      SERVICE_USER_BASE_URL: http://user-service:3000
      SERVICE_GAME_CATALOG_BASE_URL: http://game-catalog-service:3002
      SERVICE_PAYMENT_BASE_URL: http://payment-service:3003
      SERVICE_LIBRARY_BASE_URL: http://library-service:3004
      SERVICE_NOTIFICATION_BASE_URL: http://notification-service:3005
      SERVICE_REVIEW_BASE_URL: http://review-service:3006
      SERVICE_ACHIEVEMENT_BASE_URL: http://achievement-service:3007
      SERVICE_SECURITY_BASE_URL: http://security-service:3008
      SERVICE_SOCIAL_BASE_URL: http://social-service:3009
      SERVICE_DOWNLOAD_BASE_URL: http://download-service:3010
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
      CACHE_ENABLED: 'true'
      CACHE_TTL_MS: 30000
      CORS_ENABLED: 'true'
      CORS_ORIGIN: "*"
      LOG_LEVEL: debug
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      game-catalog-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      library-service:
        condition: service_healthy
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: redis_gateway
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Mock Services for Development
  user-service:
    build:
      context: ./mocks/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "3000:3000"
    environment:
      PORT: 3000
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3

  game-catalog-service:
    build:
      context: ./mocks/game-catalog-service
      dockerfile: Dockerfile
    container_name: game-catalog-service
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3

  payment-service:
    build:
      context: ./mocks/payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    ports:
      - "3003:3003"
    environment:
      PORT: 3003
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3

  library-service:
    build:
      context: ./mocks/library-service
      dockerfile: Dockerfile
    container_name: library-service
    ports:
      - "3004:3004"
    environment:
      PORT: 3004
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3004/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3

  notification-service:
    build:
      context: ./mocks/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "3005:3005"
    environment:
      PORT: 3005
    networks:
      - gateway-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3005/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  redis_data:
    driver: local

networks:
  gateway-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
