version: '3.8'

services:
  # API Gateway Service - Production
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: api-gateway-prod
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      REDIS_KEY_PREFIX: "cryo:gateway:prod:"
      SERVICE_DEFAULT_TIMEOUT_MS: 5000
      SERVICE_DEFAULT_RETRIES: 3
      # Production service URLs (should be overridden in deployment)
      SERVICE_USER_BASE_URL: ${SERVICE_USER_BASE_URL:-http://user-service:3000}
      SERVICE_GAME_CATALOG_BASE_URL: ${SERVICE_GAME_CATALOG_BASE_URL:-http://game-catalog-service:3002}
      SERVICE_PAYMENT_BASE_URL: ${SERVICE_PAYMENT_BASE_URL:-http://payment-service:3003}
      SERVICE_LIBRARY_BASE_URL: ${SERVICE_LIBRARY_BASE_URL:-http://library-service:3004}
      SERVICE_NOTIFICATION_BASE_URL: ${SERVICE_NOTIFICATION_BASE_URL:-http://notification-service:3005}
      SERVICE_REVIEW_BASE_URL: ${SERVICE_REVIEW_BASE_URL:-http://review-service:3006}
      SERVICE_ACHIEVEMENT_BASE_URL: ${SERVICE_ACHIEVEMENT_BASE_URL:-http://achievement-service:3007}
      SERVICE_SECURITY_BASE_URL: ${SERVICE_SECURITY_BASE_URL:-http://security-service:3008}
      SERVICE_SOCIAL_BASE_URL: ${SERVICE_SOCIAL_BASE_URL:-http://social-service:3009}
      SERVICE_DOWNLOAD_BASE_URL: ${SERVICE_DOWNLOAD_BASE_URL:-http://download-service:3010}
      RATE_LIMIT_ENABLED: 'true'
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 1000
      CACHE_ENABLED: 'true'
      CACHE_TTL_MS: 300000
      CORS_ENABLED: 'true'
      CORS_ORIGIN: ${CORS_ORIGIN:-https://cryo-gaming.ru}
      LOG_LEVEL: info
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - gateway-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache Service - Production
  redis:
    image: redis:7-alpine
    container_name: redis_gateway_prod
    volumes:
      - redis_prod_data:/data
      - ./redis.prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - gateway-net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_prod_data:
    driver: local

networks:
  gateway-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16