import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import { AppModule } from '../../app.module';
import { GlobalExceptionFilter } from '../filters/global-exception.filter';
import { LoggingInterceptor } from '../interceptors/logging.interceptor';
import { ResponseInterceptor } from '../interceptors/response.interceptor';
import { PaymentCacheInterceptor } from '../interceptors/payment-cache.interceptor';
import { ThrottlerGuard } from '@nestjs/throttler';
import { ValidationPipe } from '@nestjs/common';

describe('Middleware and Interceptors Integration', () => {
  let app: INestApplication;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule],
    }).compile();

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  afterEach(async () => {
    await app.close();
  });

  describe('Global Configuration', () => {
    it('should have ValidationPipe configured globally', () => {
      // ValidationPipe is configured in main.ts, this test verifies the setup
      expect(app).toBeDefined();
    });

    it('should have GlobalExceptionFilter configured', () => {
      const filter = app.get(GlobalExceptionFilter);
      expect(filter).toBeDefined();
      expect(filter).toBeInstanceOf(GlobalExceptionFilter);
    });

    it('should have LoggingInterceptor configured', () => {
      const interceptor = app.get(LoggingInterceptor);
      expect(interceptor).toBeDefined();
      expect(interceptor).toBeInstanceOf(LoggingInterceptor);
    });

    it('should have ResponseInterceptor configured', () => {
      const interceptor = app.get(ResponseInterceptor);
      expect(interceptor).toBeDefined();
      expect(interceptor).toBeInstanceOf(ResponseInterceptor);
    });

    it('should have PaymentCacheInterceptor available', () => {
      const interceptor = app.get(PaymentCacheInterceptor);
      expect(interceptor).toBeDefined();
      expect(interceptor).toBeInstanceOf(PaymentCacheInterceptor);
    });

    it('should have ThrottlerGuard configured', () => {
      const guard = app.get(ThrottlerGuard);
      expect(guard).toBeDefined();
      expect(guard).toBeInstanceOf(ThrottlerGuard);
    });
  });

  describe('Interceptor Functionality', () => {
    it('should sanitize sensitive data in LoggingInterceptor', () => {
      const interceptor = app.get(LoggingInterceptor);
      const sensitiveBody = {
        orderId: 'test-order',
        password: 'secret123',
        cardNumber: '1234567890123456',
        cvv: '123',
        token: 'jwt-token',
        webhookData: { secret: 'webhook-secret' }
      };

      const sanitized = (interceptor as any).sanitizeBody(sensitiveBody);

      expect(sanitized.orderId).toBe('test-order');
      expect(sanitized.password).toBe('[REDACTED]');
      expect(sanitized.cardNumber).toBe('[REDACTED]');
      expect(sanitized.cvv).toBe('[REDACTED]');
      expect(sanitized.token).toBe('[REDACTED]');
      expect(sanitized.webhookData).toBe('[REDACTED]');
    });

    it('should format response correctly in ResponseInterceptor', () => {
      const interceptor = app.get(ResponseInterceptor);
      expect(interceptor).toBeDefined();
      // ResponseInterceptor functionality is tested through integration tests
    });
  });

  describe('Error Handling', () => {
    it('should format errors correctly in GlobalExceptionFilter', () => {
      const filter = app.get(GlobalExceptionFilter);
      expect(filter).toBeDefined();
      // Error formatting is tested through integration tests
    });
  });

  describe('Caching', () => {
    it('should have cache manager available for PaymentCacheInterceptor', () => {
      const interceptor = app.get(PaymentCacheInterceptor);
      expect(interceptor).toBeDefined();
      expect((interceptor as any).cacheManager).toBeDefined();
    });
  });

  describe('Rate Limiting', () => {
    it('should have throttler configuration', () => {
      const guard = app.get(ThrottlerGuard);
      expect(guard).toBeDefined();
      // Rate limiting functionality is tested through integration tests
    });
  });
});