name: Cryo Microservices CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test all services
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          'api-gateway',
          'user-service',
          'game-catalog-service',
          'library-service',
          'review-service',
          'payment-service',
          'notification-service',
          'social-service',
          'achievement-service',
          'security-service'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
    
    - name: Install dependencies
      working-directory: backend/${{ matrix.service }}
      run: npm ci --legacy-peer-deps
    
    - name: Run linting
      working-directory: backend/${{ matrix.service }}
      run: npm run lint
    
    - name: Run tests
      working-directory: backend/${{ matrix.service }}
      run: npm test
    
    - name: Run build
      working-directory: backend/${{ matrix.service }}
      run: npm run build

  # Test Go service
  test-go:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      working-directory: backend/download-service
      run: go mod download
    
    - name: Run tests
      working-directory: backend/download-service
      run: go test ./...
    
    - name: Run build
      working-directory: backend/download-service
      run: go build -o main cmd/main.go

  # Security scanning
  security:
    runs-on: ubuntu-latest
    needs: [test, test-go]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'backend/'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test, test-go, security]
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        service: [
          'api-gateway',
          'user-service',
          'game-catalog-service',
          'library-service',
          'review-service',
          'payment-service',
          'notification-service',
          'social-service',
          'achievement-service',
          'security-service',
          'download-service'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Apply common resources
        kubectl apply -f backend/k8s/namespace.yaml
        kubectl apply -f backend/k8s/configmap.yaml
        kubectl apply -f backend/k8s/secrets.yaml
        kubectl apply -f backend/k8s/ingress.yaml
        
        # Deploy all services
        for service in api-gateway user-service game-catalog-service library-service review-service payment-service notification-service social-service achievement-service security-service download-service; do
          echo "Deploying $service to staging..."
          
          # Apply service-specific k8s files if they exist
          if [ -f "backend/k8s/${service}-deployment.yaml" ]; then
            kubectl apply -f "backend/k8s/${service}-deployment.yaml"
          fi
          
          if [ -f "backend/k8s/${service}-monitoring.yaml" ]; then
            kubectl apply -f "backend/k8s/${service}-monitoring.yaml"
          fi
          
          # Update image tag
          kubectl set image deployment/${service}-deployment ${service}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:develop-${{ github.sha }} -n microservices
        done
        
        # Wait for rollout
        for service in api-gateway user-service game-catalog-service library-service review-service payment-service notification-service social-service achievement-service security-service download-service; do
          kubectl rollout status deployment/${service}-deployment -n microservices --timeout=300s
        done

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        # Apply common resources
        kubectl apply -f backend/k8s/namespace.yaml
        kubectl apply -f backend/k8s/configmap.yaml
        kubectl apply -f backend/k8s/secrets.yaml
        kubectl apply -f backend/k8s/ingress.yaml
        
        # Deploy all services
        for service in api-gateway user-service game-catalog-service library-service review-service payment-service notification-service social-service achievement-service security-service download-service; do
          echo "Deploying $service to production..."
          
          # Apply service-specific k8s files if they exist
          if [ -f "backend/k8s/${service}-deployment.yaml" ]; then
            kubectl apply -f "backend/k8s/${service}-deployment.yaml"
          fi
          
          if [ -f "backend/k8s/${service}-monitoring.yaml" ]; then
            kubectl apply -f "backend/k8s/${service}-monitoring.yaml"
          fi
          
          # Update image tag
          kubectl set image deployment/${service}-deployment ${service}=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${service}:main-${{ github.sha }} -n microservices
        done
        
        # Wait for rollout
        for service in api-gateway user-service game-catalog-service library-service review-service payment-service notification-service social-service achievement-service security-service download-service; do
          kubectl rollout status deployment/${service}-deployment -n microservices --timeout=600s
        done
    
    - name: Run smoke tests
      run: |
        # Add smoke tests here
        sleep 30
        curl -f https://api.yourdomain.com/health || exit 1
        curl -f https://api.yourdomain.com/api/users/health || exit 1

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}