# =============================================================================
# Auth Service Kubernetes Deployment for Staging Environment
# =============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-deployment
  namespace: microservices
  labels:
    app: auth-service
    version: v1.0.0
    tier: backend
    component: authentication
    environment: staging
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        version: v1.0.0
        tier: backend
        component: authentication
        environment: staging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/api/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Service account
      serviceAccountName: auth-service
      
      containers:
      - name: auth-service
        image: ghcr.io/your-org/cryo-platform/auth-service:develop-latest
        imagePullPolicy: Always
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        
        # Ports
        ports:
        - name: http
          containerPort: 3001
          protocol: TCP
        
        # Environment variables
        env:
        - name: NODE_ENV
          value: "staging"
        - name: PORT
          value: "3001"
        
        # Environment from secrets and config maps
        envFrom:
        - secretRef:
            name: auth-service-secrets
        - configMapRef:
            name: auth-service-config
        
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "500Mi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 12
        
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: logs
        emptyDir:
          sizeLimit: 50Mi
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # Node selection
      nodeSelector:
        kubernetes.io/arch: amd64
      
      # Anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - auth-service
              topologyKey: kubernetes.io/hostname

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service
  namespace: microservices
  labels:
    app: auth-service

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: microservices
  labels:
    app: auth-service
    tier: backend
    component: authentication
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3001
    targetPort: http
    protocol: TCP
  selector:
    app: auth-service

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-pdb
  namespace: microservices
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: auth-service