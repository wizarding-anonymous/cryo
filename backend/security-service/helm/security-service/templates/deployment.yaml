apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "security-service.fullname" . }}
  labels:
    {{- include "security-service.labels" . | nindent 4 }}
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "security-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "security-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "security-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: {{ include "security-service.fullname" . }}
            - secretRef:
                name: {{ include "security-service.fullname" . }}
          {{- if .Values.healthChecks.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthChecks.livenessProbe.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthChecks.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.healthChecks.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthChecks.readinessProbe.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthChecks.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.healthChecks.startupProbe.enabled }}
          startupProbe:
            httpGet:
              path: {{ .Values.healthChecks.startupProbe.path }}
              port: http
              scheme: HTTP
            initialDelaySeconds: {{ .Values.healthChecks.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthChecks.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.healthChecks.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.healthChecks.startupProbe.failureThreshold }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 15"]
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.volumes.tmp.enabled }}
            - name: tmp
              mountPath: /tmp
            {{- end }}
            {{- if .Values.volumes.cache.enabled }}
            - name: cache
              mountPath: /usr/src/app/.cache
            {{- end }}
      volumes:
        {{- if .Values.volumes.tmp.enabled }}
        - name: tmp
          emptyDir: {{- toYaml .Values.volumes.tmp.emptyDir | nindent 12 }}
        {{- end }}
        {{- if .Values.volumes.cache.enabled }}
        - name: cache
          emptyDir: {{- toYaml .Values.volumes.cache.emptyDir | nindent 12 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

