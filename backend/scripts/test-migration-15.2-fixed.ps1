#!/usr/bin/env pwsh
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ Auth Service —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
# –ó–∞–¥–∞—á–∞ 15.2: Validate migration with existing data

Write-Host "üîÑ –ó–ê–î–ê–ß–ê 15.2: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
$AUTH_SERVICE_URL = "http://localhost:3001"
$USER_SERVICE_URL = "http://localhost:3002"
$TEST_EMAIL = "migration-test-$(Get-Date -Format 'yyyyMMdd-HHmmss')@example.com"
$TEST_PASSWORD = "TestPassword123!"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function Invoke-ApiRequest {
    param(
        [string]$Url,
        [string]$Method = "GET",
        [hashtable]$Headers = @{},
        [object]$Body = $null
    )
    
    try {
        $params = @{
            Uri = $Url
            Method = $Method
            Headers = $Headers
            ContentType = "application/json"
        }
        
        if ($Body) {
            $params.Body = ($Body | ConvertTo-Json -Depth 10)
        }
        
        $response = Invoke-RestMethod @params
        return @{ Success = $true; Data = $response; StatusCode = 200 }
    }
    catch {
        $statusCode = if ($_.Exception.Response) { $_.Exception.Response.StatusCode.value__ } else { 0 }
        return @{ Success = $false; Error = $_.Exception.Message; StatusCode = $statusCode }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ health endpoints
function Test-ServiceHealth {
    param([string]$ServiceName, [string]$BaseUrl)
    
    Write-Host "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è $ServiceName..." -ForegroundColor Yellow
    
    $healthResult = Invoke-ApiRequest -Url "$BaseUrl/api/health"
    if ($healthResult.Success) {
        Write-Host "  ‚úÖ $ServiceName health check: OK" -ForegroundColor Green
        return $true
    } else {
        Write-Host "  ‚ùå $ServiceName health check: FAILED - $($healthResult.Error)" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Auth Service —Å User Service
function Test-AuthUserServiceIntegration {
    Write-Host "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Auth Service —Å User Service..." -ForegroundColor Yellow
    
    # –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Auth Service
    Write-Host "  üìù –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Auth Service..." -ForegroundColor Cyan
    
    $registerData = @{
        email = "auth-integration-$(Get-Date -Format 'yyyyMMdd-HHmmss')@example.com"
        password = $TEST_PASSWORD
        name = "Auth Integration Test"
    }
    
    $registerResult = Invoke-ApiRequest -Url "$AUTH_SERVICE_URL/api/auth/register" -Method "POST" -Body $registerData
    
    if ($registerResult.Success) {
        Write-Host "    ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" -ForegroundColor Green
        $accessToken = $registerResult.Data.accessToken
        $userId = $registerResult.Data.user.id
        
        # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ User Service
        Write-Host "  üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ User Service..." -ForegroundColor Cyan
        
        $userResult = Invoke-ApiRequest -Url "$USER_SERVICE_URL/users/$userId"
        
        if ($userResult.Success) {
            Write-Host "    ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ User Service: $($userResult.Data.email)" -ForegroundColor Green
        } else {
            Write-Host "    ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ User Service: $($userResult.Error)" -ForegroundColor Red
            return $false
        }
        
        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        Write-Host "  üîê –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞..." -ForegroundColor Cyan
        
        $validateResult = Invoke-ApiRequest -Url "$AUTH_SERVICE_URL/api/auth/validate" -Method "POST" -Body @{ token = $accessToken }
        
        if ($validateResult.Success) {
            Write-Host "    ‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω: $($validateResult.Data.userId)" -ForegroundColor Green
        } else {
            Write-Host "    ‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: $($validateResult.Error)" -ForegroundColor Red
            return $false
        }
        
        return $true
    } else {
        Write-Host "    ‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞: $($registerResult.Error)" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö JWT —Ç–æ–∫–µ–Ω–æ–≤
function Test-ExistingJWTTokens {
    Write-Host "üé´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ JWT —Ç–æ–∫–µ–Ω–∞–º–∏..." -ForegroundColor Yellow
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Auth Service
    $registerData = @{
        email = "jwt-test-$(Get-Date -Format 'yyyyMMdd-HHmmss')@example.com"
        password = $TEST_PASSWORD
        name = "JWT Test User"
    }
    
    $registerResult = Invoke-ApiRequest -Url "$AUTH_SERVICE_URL/api/auth/register" -Method "POST" -Body $registerData
    
    if ($registerResult.Success) {
        $accessToken = $registerResult.Data.accessToken
        $refreshToken = $registerResult.Data.refreshToken
        
        Write-Host "  ‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ access token
        $validateResult = Invoke-ApiRequest -Url "$AUTH_SERVICE_URL/api/auth/validate" -Method "POST" -Body @{ token = $accessToken }
        
        if ($validateResult.Success) {
            Write-Host "  ‚úÖ Access token –≤–∞–ª–∏–¥–µ–Ω" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Access token –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: $($validateResult.Error)" -ForegroundColor Red
            return $false
        }
        
        # –¢–µ—Å—Ç refresh token
        $refreshResult = Invoke-ApiRequest -Url "$AUTH_SERVICE_URL/api/auth/refresh" -Method "POST" -Body @{ refreshToken = $refreshToken }
        
        if ($refreshResult.Success) {
            Write-Host "  ‚úÖ Refresh token —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå Refresh token –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: $($refreshResult.Error)" -ForegroundColor Red
            return $false
        }
        
        return $true
    } else {
        Write-Host "  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã: $($registerResult.Error)" -ForegroundColor Red
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ User Service –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö
function Test-UserServiceDataRequests {
    Write-Host "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ User Service –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Yellow
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Auth Service
    $registerData = @{
        email = "data-test-$(Get-Date -Format 'yyyyMMdd-HHmmss')@example.com"
        password = $TEST_PASSWORD
        name = "Data Test User"
    }
    
    $registerResult = Invoke-ApiRequest -Url "$AUTH_SERVICE_URL/api/auth/register" -Method "POST" -Body $registerData
    
    if ($registerResult.Success) {
        $userId = $registerResult.Data.user.id
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ User Service
        $profileResult = Invoke-ApiRequest -Url "$USER_SERVICE_URL/users/$userId"
        
        if ($profileResult.Success) {
            Write-Host "  ‚úÖ User Service –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö: $($profileResult.Data.email)" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå User Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö: $($profileResult.Error)" -ForegroundColor Red
            return $false
        }
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $existsResult = Invoke-ApiRequest -Url "$USER_SERVICE_URL/users/$userId/exists"
        
        if ($existsResult.Success -and $existsResult.Data.exists) {
            Write-Host "  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç" -ForegroundColor Red
            return $false
        }
        
        return $true
    } else {
        Write-Host "  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $($registerResult.Error)" -ForegroundColor Red
        return $false
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
function Main {
    Write-Host ""
    Write-Host "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–∏–≥—Ä–∞—Ü–∏–∏ Auth Service..." -ForegroundColor Green
    Write-Host ""
    
    $allTestsPassed = $true
    
    # –¢–µ—Å—Ç 1: Health checks
    Write-Host "=== –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ò–°–û–í ===" -ForegroundColor Magenta
    $authHealthy = Test-ServiceHealth -ServiceName "Auth Service" -BaseUrl $AUTH_SERVICE_URL
    $userHealthy = Test-ServiceHealth -ServiceName "User Service" -BaseUrl $USER_SERVICE_URL
    
    if (-not $authHealthy -or -not $userHealthy) {
        Write-Host "‚ùå –û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ." -ForegroundColor Red
        return $false
    }
    
    Write-Host ""
    
    # –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Auth Service —Å User Service
    Write-Host "=== –≠–¢–ê–ü 2: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø AUTH SERVICE –° USER SERVICE ===" -ForegroundColor Magenta
    $integrationPassed = Test-AuthUserServiceIntegration
    if (-not $integrationPassed) { $allTestsPassed = $false }
    
    Write-Host ""
    
    # –¢–µ—Å—Ç 3: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–æ–≤
    Write-Host "=== –≠–¢–ê–ü 3: –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ JWT –¢–û–ö–ï–ù–û–í ===" -ForegroundColor Magenta
    $jwtPassed = Test-ExistingJWTTokens
    if (-not $jwtPassed) { $allTestsPassed = $false }
    
    Write-Host ""
    
    # –¢–µ—Å—Ç 4: User Service –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    Write-Host "=== –≠–¢–ê–ü 4: USER SERVICE –ü–†–û–î–û–õ–ñ–ê–ï–¢ –û–ë–°–õ–£–ñ–ò–í–ê–¢–¨ –î–ê–ù–ù–´–ï ===" -ForegroundColor Magenta
    $userServicePassed = Test-UserServiceDataRequests
    if (-not $userServicePassed) { $allTestsPassed = $false }
    
    Write-Host ""
    Write-Host "================================================================" -ForegroundColor Cyan
    
    if ($allTestsPassed) {
        Write-Host "üéâ –í–°–ï –¢–ï–°–¢–´ –ú–ò–ì–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!" -ForegroundColor Green
        Write-Host "‚úÖ Auth Service –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é" -ForegroundColor Green
        Write-Host "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å User Service —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -ForegroundColor Green
        Write-Host "‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã" -ForegroundColor Green
        Write-Host "‚úÖ JWT —Ç–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ" -ForegroundColor Green
        return $true
    } else {
        Write-Host "‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ú–ò–ì–†–ê–¶–ò–ò –ù–ï –ü–†–û–®–õ–ò" -ForegroundColor Red
        Write-Host "‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥ production" -ForegroundColor Yellow
        return $false
    }
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
$result = Main

# –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
if ($result) {
    exit 0
} else {
    exit 1
}