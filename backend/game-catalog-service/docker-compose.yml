version: '3.8'

# This docker-compose file is for local development and testing purposes.
# It sets up the game-catalog-service application along with its dependencies:
# a PostgreSQL database and a Redis cache.

services:
  # Game Catalog Service Application
  game-catalog-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: game-catalog-service
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env.docker
    environment:
      - NODE_ENV=development
      - PORT=3002
      - LOG_LEVEL=debug
    volumes:
      # Mount logs directory for development
      - ./logs:/usr/src/app/logs
    networks:
      - gcs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "dist/src/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres_gcs_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-game_catalog_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432" # Exposing on 5433 to avoid conflict with other potential dbs
    volumes:
      - postgres_gcs_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - gcs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-game_catalog_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis_gcs_cache
    ports:
      - "6380:6379" # Exposing on 6380 to avoid conflict
    volumes:
      - redis_gcs_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - gcs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

# Volumes for data persistence
volumes:
  postgres_gcs_data:
    driver: local
  redis_gcs_data:
    driver: local

# Network for inter-service communication
networks:
  gcs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
