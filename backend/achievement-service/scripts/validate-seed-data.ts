#!/usr/bin/env ts-node

/**
 * Validation script for achievement seed data
 * This script validates the seed migration without requiring a database connection
 */

import { AchievementType } from '../src/achievement/entities/achievement.entity';

interface AchievementSeedData {
  name: string;
  description: string;
  type: string;
  condition: string;
  iconUrl: string;
  points: number;
  isActive: boolean;
}

// Extract the seed data from the migration (simulated)
const seedAchievements: AchievementSeedData[] = [
  {
    name: '–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞',
    description: '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–æ–π –∏–≥—Ä—ã –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∏–≥—Ä!',
    type: 'first_purchase',
    condition: '{"type": "first_time"}',
    iconUrl: '/icons/achievements/first-purchase.svg',
    points: 100,
    isActive: true,
  },
  {
    name: '–ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤',
    description: '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤.',
    type: 'first_review',
    condition: '{"type": "first_time"}',
    iconUrl: '/icons/achievements/first-review.svg',
    points: 50,
    isActive: true,
  },
  {
    name: '–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥',
    description: '–û—Ç–ª–∏—á–Ω–æ! –í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –ò–≥—Ä—ã –≤–µ—Å–µ–ª–µ–µ —Å –¥—Ä—É–∑—å—è–º–∏!',
    type: 'first_friend',
    condition: '{"type": "first_time"}',
    iconUrl: '/icons/achievements/first-friend.svg',
    points: 75,
    isActive: true,
  },
  {
    name: '–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –∏–≥—Ä',
    description: '–£ –≤–∞—Å —É–∂–µ 5 –∏–≥—Ä –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é.',
    type: 'games_purchased',
    condition: '{"type": "count", "target": 5, "field": "games_count"}',
    iconUrl: '/icons/achievements/game-collector.svg',
    points: 200,
    isActive: true,
  },
  {
    name: '–ê–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–∏—Ç–∏–∫',
    description: '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —É–∂–µ 10 –æ—Ç–∑—ã–≤–æ–≤! –í–∞—à–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä.',
    type: 'reviews_written',
    condition: '{"type": "count", "target": 10, "field": "reviews_count"}',
    iconUrl: '/icons/achievements/active-critic.svg',
    points: 300,
    isActive: true,
  },
  {
    name: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å',
    description: '–í–ø–µ—á–∞—Ç–ª—è—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è! –£ –≤–∞—Å —É–∂–µ 20 –∏–≥—Ä –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. –ù–∞—Å—Ç–æ—è—â–∏–π —Ü–µ–Ω–∏—Ç–µ–ª—å –∏–≥—Ä!',
    type: 'games_purchased',
    condition: '{"type": "threshold", "target": 20, "field": "games_count"}',
    iconUrl: '/icons/achievements/librarian.svg',
    points: 500,
    isActive: true,
  },
  {
    name: '–≠–∫—Å–ø–µ—Ä—Ç-—Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç',
    description: '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —É–∂–µ 25 –æ—Ç–∑—ã–≤–æ–≤. –ù–∞—Å—Ç–æ—è—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç –≤ –º–∏—Ä–µ –∏–≥—Ä!',
    type: 'reviews_written',
    condition: '{"type": "threshold", "target": 25, "field": "reviews_count"}',
    iconUrl: '/icons/achievements/expert-reviewer.svg',
    points: 750,
    isActive: true,
  },
  {
    name: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–£ –≤–∞—Å —É–∂–µ 5 –¥—Ä—É–∑–µ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ! –í—ã —Å–æ–∑–¥–∞–µ—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ.',
    type: 'first_friend',
    condition: '{"type": "count", "target": 5, "field": "friends_count"}',
    iconUrl: '/icons/achievements/social-butterfly.svg',
    points: 150,
    isActive: true,
  },
  {
    name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç',
    description: '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ 3 –æ—Ç–∑—ã–≤–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏.',
    type: 'reviews_written',
    condition: '{"type": "count", "target": 3, "field": "reviews_count"}',
    iconUrl: '/icons/achievements/beginner-reviewer.svg',
    points: 100,
    isActive: true,
  },
];

interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  summary: {
    totalAchievements: number;
    byType: Record<string, number>;
    byConditionType: Record<string, number>;
    pointsRange: { min: number; max: number };
  };
}

function validateSeedData(): ValidationResult {
  const result: ValidationResult = {
    isValid: true,
    errors: [],
    warnings: [],
    summary: {
      totalAchievements: seedAchievements.length,
      byType: {},
      byConditionType: {},
      pointsRange: { min: Infinity, max: -Infinity },
    },
  };

  const validTypes = Object.values(AchievementType);
  const validConditionTypes = ['first_time', 'count', 'threshold'];
  const achievementNames = new Set<string>();

  seedAchievements.forEach((achievement, index) => {
    const prefix = `Achievement ${index + 1} (${achievement.name})`;

    // Validate name uniqueness
    if (achievementNames.has(achievement.name)) {
      result.errors.push(`${prefix}: Duplicate name "${achievement.name}"`);
      result.isValid = false;
    }
    achievementNames.add(achievement.name);

    // Validate name length
    if (achievement.name.length > 100) {
      result.errors.push(`${prefix}: Name too long (${achievement.name.length} > 100)`);
      result.isValid = false;
    }

    // Validate description
    if (!achievement.description || achievement.description.length < 10) {
      result.errors.push(`${prefix}: Description too short or missing`);
      result.isValid = false;
    }

    // Validate type
    if (!validTypes.includes(achievement.type as AchievementType)) {
      result.errors.push(`${prefix}: Invalid type "${achievement.type}"`);
      result.isValid = false;
    }

    // Count by type
    result.summary.byType[achievement.type] = (result.summary.byType[achievement.type] || 0) + 1;

    // Validate condition JSON
    try {
      const condition = JSON.parse(achievement.condition);
      
      if (!validConditionTypes.includes(condition.type)) {
        result.errors.push(`${prefix}: Invalid condition type "${condition.type}"`);
        result.isValid = false;
      }

      // Count by condition type
      result.summary.byConditionType[condition.type] = 
        (result.summary.byConditionType[condition.type] || 0) + 1;

      // Validate condition structure
      if (condition.type === 'count' || condition.type === 'threshold') {
        if (typeof condition.target !== 'number' || condition.target <= 0) {
          result.errors.push(`${prefix}: Invalid target value for ${condition.type} condition`);
          result.isValid = false;
        }
        if (!condition.field || typeof condition.field !== 'string') {
          result.errors.push(`${prefix}: Missing or invalid field for ${condition.type} condition`);
          result.isValid = false;
        }
      }
    } catch (error) {
      result.errors.push(`${prefix}: Invalid JSON in condition: ${achievement.condition}`);
      result.isValid = false;
    }

    // Validate icon URL
    if (!achievement.iconUrl || !achievement.iconUrl.match(/^\/icons\/achievements\/.*\.svg$/)) {
      result.errors.push(`${prefix}: Invalid icon URL format`);
      result.isValid = false;
    }

    // Validate points
    if (typeof achievement.points !== 'number' || achievement.points <= 0) {
      result.errors.push(`${prefix}: Invalid points value`);
      result.isValid = false;
    }

    // Update points range
    result.summary.pointsRange.min = Math.min(result.summary.pointsRange.min, achievement.points);
    result.summary.pointsRange.max = Math.max(result.summary.pointsRange.max, achievement.points);

    // Validate isActive
    if (typeof achievement.isActive !== 'boolean') {
      result.errors.push(`${prefix}: isActive must be boolean`);
      result.isValid = false;
    }
  });

  // Task requirement validations
  const requiredAchievements = ['–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞', '–ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤', '–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥'];
  requiredAchievements.forEach(name => {
    if (!achievementNames.has(name)) {
      result.errors.push(`Missing required achievement: ${name}`);
      result.isValid = false;
    }
  });

  // Check for 5 games and 10 reviews achievements
  const hasGameCollector = seedAchievements.some(a => 
    a.condition.includes('"target": 5') && a.condition.includes('"field": "games_count"')
  );
  const hasActiveReviewer = seedAchievements.some(a => 
    a.condition.includes('"target": 10') && a.condition.includes('"field": "reviews_count"')
  );

  if (!hasGameCollector) {
    result.errors.push('Missing achievement for 5 games');
    result.isValid = false;
  }
  if (!hasActiveReviewer) {
    result.errors.push('Missing achievement for 10 reviews');
    result.isValid = false;
  }

  // Check condition type coverage
  if (!result.summary.byConditionType.first_time) {
    result.errors.push('Missing first_time condition type');
    result.isValid = false;
  }
  if (!result.summary.byConditionType.count) {
    result.errors.push('Missing count condition type');
    result.isValid = false;
  }
  if (!result.summary.byConditionType.threshold) {
    result.errors.push('Missing threshold condition type');
    result.isValid = false;
  }

  // Warnings
  if (result.summary.totalAchievements < 5) {
    result.warnings.push('Consider adding more achievements for better user engagement');
  }

  if (result.summary.pointsRange.max - result.summary.pointsRange.min < 500) {
    result.warnings.push('Consider wider point range for better progression');
  }

  return result;
}

function printValidationResult(result: ValidationResult): void {
  console.log('üéØ Achievement Seed Data Validation Report');
  console.log('==========================================\n');

  console.log('üìä Summary:');
  console.log(`  Total Achievements: ${result.summary.totalAchievements}`);
  console.log(`  Points Range: ${result.summary.pointsRange.min} - ${result.summary.pointsRange.max}`);
  console.log('\nüìà By Type:');
  Object.entries(result.summary.byType).forEach(([type, count]) => {
    console.log(`  ${type}: ${count}`);
  });
  console.log('\nüîß By Condition Type:');
  Object.entries(result.summary.byConditionType).forEach(([type, count]) => {
    console.log(`  ${type}: ${count}`);
  });

  if (result.errors.length > 0) {
    console.log('\n‚ùå Errors:');
    result.errors.forEach(error => console.log(`  ‚Ä¢ ${error}`));
  }

  if (result.warnings.length > 0) {
    console.log('\n‚ö†Ô∏è  Warnings:');
    result.warnings.forEach(warning => console.log(`  ‚Ä¢ ${warning}`));
  }

  console.log(`\n${result.isValid ? '‚úÖ' : '‚ùå'} Validation ${result.isValid ? 'PASSED' : 'FAILED'}`);
  
  if (result.isValid) {
    console.log('\nüéâ All task requirements satisfied:');
    console.log('  ‚úÖ Basic achievements: "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞", "–ü–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤", "–ü–µ—Ä–≤—ã–π –¥—Ä—É–≥"');
    console.log('  ‚úÖ Quantitative achievements: "5 –∏–≥—Ä", "10 –æ—Ç–∑—ã–≤–æ–≤"');
    console.log('  ‚úÖ All condition types: first_time, count, threshold');
    console.log('  ‚úÖ Icons and descriptions for each achievement');
    console.log('  ‚úÖ Points system implemented');
  }
}

// Run validation
const result = validateSeedData();
printValidationResult(result);

// Exit with appropriate code
process.exit(result.isValid ? 0 : 1);