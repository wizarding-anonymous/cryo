version: '3.8'

services:
  # Achievement Service Production
  achievement-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: achievement-service-prod
    ports:
      - "3003:3003"
    env_file:
      - .env.production
    environment:
      - NODE_ENV=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - achievement-network
    restart: always
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL Production
  postgres:
    image: postgres:14-alpine
    container_name: achievement-postgres-prod
    environment:
      - POSTGRES_DB=achievement_db
      - POSTGRES_USER=achievement_user
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - achievement-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U achievement_user -d achievement_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Production
  redis:
    image: redis:7-alpine
    container_name: achievement-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
    networks:
      - achievement-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local

networks:
  achievement-network:
    driver: bridge
    name: achievement-prod-network