version: '3.8'

services:
  # Achievement Service
  achievement-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: achievement-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=achievement_db
      - DATABASE_USER=achievement_user
      - DATABASE_PASSWORD=achievement_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-jwt-secret-key
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - achievement-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: achievement-postgres
    environment:
      - POSTGRES_DB=achievement_db
      - POSTGRES_USER=achievement_user
      - POSTGRES_PASSWORD=achievement_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - achievement-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U achievement_user -d achievement_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: achievement-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - achievement-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Adminer для управления базой данных (опционально)
  adminer:
    image: adminer:4-standalone
    container_name: achievement-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - achievement-network
    restart: unless-stopped
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  achievement-network:
    driver: bridge
    name: achievement-network