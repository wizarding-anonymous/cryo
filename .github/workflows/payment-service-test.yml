name: Payment Service Tests

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/payment-service/**'
      - '.github/workflows/payment-service-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/payment-service/**'

jobs:
  # Unit and Integration Tests
  test-payment-service:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: payment_password
          POSTGRES_USER: payment_service
          POSTGRES_DB: payment_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/payment-service/package-lock.json
    
    - name: Install dependencies
      working-directory: backend/payment-service
      run: npm ci --legacy-peer-deps
    
    - name: Run ESLint
      working-directory: backend/payment-service
      run: npm run lint
    
    - name: Run unit tests
      working-directory: backend/payment-service
      env:
        NODE_ENV: test
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USERNAME: payment_service
        POSTGRES_PASSWORD: payment_password
        POSTGRES_DATABASE: payment_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key-for-ci
        PAYMENT_MODE: simulation
        PAYMENT_AUTO_APPROVE: true
        PAYMENT_SUCCESS_RATE: 0.95
        CI: true
      run: |
        npm test -- --passWithNoTests --ci --coverage=false --maxWorkers=2 --forceExit --detectOpenHandles --testTimeout=30000
    
    - name: Run E2E tests
      working-directory: backend/payment-service
      env:
        NODE_ENV: test
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USERNAME: payment_service
        POSTGRES_PASSWORD: payment_password
        POSTGRES_DATABASE: payment_db
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-secret-key-for-ci
        PAYMENT_MODE: simulation
        PAYMENT_AUTO_APPROVE: true
        PAYMENT_SUCCESS_RATE: 0.95
        CI: true
      run: |
        npm run test:e2e -- --passWithNoTests --ci --coverage=false --maxWorkers=1 --forceExit --detectOpenHandles --testTimeout=60000
    
    - name: Build application
      working-directory: backend/payment-service
      run: npm run build
    
    - name: Test Docker build
      working-directory: backend/payment-service
      run: |
        echo "Testing Docker build for payment-service..."
        docker build -t test-payment-service .
        echo "✅ Docker build successful for payment-service"

  # Docker Compose Integration Test
  test-payment-docker-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: test-payment-service
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Payment Service with Docker Compose
      working-directory: backend
      run: |
        echo "Starting Payment Service with Docker Compose..."
        docker-compose -f docker-compose.payment-only.yml up -d --build
        
        # Wait for services to be ready
        echo "Waiting for services to be ready..."
        sleep 60
        
        # Check if services are running
        docker-compose -f docker-compose.payment-only.yml ps
    
    - name: Run health checks
      working-directory: backend
      run: |
        echo "Running comprehensive health checks..."
        
        # Wait for Payment Service to be fully ready
        timeout 120 bash -c 'until curl -f http://localhost:3005/health; do sleep 3; done'
        
        # Test all health endpoints
        echo "Testing main health endpoint..."
        curl -f http://localhost:3005/health
        
        echo "Testing readiness endpoint..."
        curl -f http://localhost:3005/health/ready
        
        echo "Testing liveness endpoint..."
        curl -f http://localhost:3005/health/live
        
        echo "Testing metrics endpoint..."
        curl -f http://localhost:3005/metrics
        
        echo "✅ All health checks passed"
    
    - name: Test payment endpoints
      working-directory: backend
      run: |
        echo "Testing payment service endpoints..."
        
        # Test root endpoint
        response=$(curl -s http://localhost:3005)
        echo "Root response: $response"
        
        # Test that service is responding with expected structure
        if echo "$response" | grep -q "Payment Service"; then
          echo "✅ Payment Service is responding correctly"
        else
          echo "❌ Payment Service response unexpected"
          exit 1
        fi
    
    - name: Test database and Redis connectivity
      working-directory: backend
      run: |
        echo "Testing database connectivity..."
        docker exec payment-service npm run typeorm -- query "SELECT 1" || echo "Database test failed"
        
        echo "Testing Redis connectivity..."
        docker exec redis-cache redis-cli -a redis_password ping || echo "Redis test failed"
        
        echo "✅ Connectivity tests completed"
    
    - name: Check service logs
      if: always()
      working-directory: backend
      run: |
        echo "=== Payment Service Logs ==="
        docker-compose -f docker-compose.payment-only.yml logs payment-service | tail -50
        
        echo "=== PostgreSQL Logs ==="
        docker-compose -f docker-compose.payment-only.yml logs postgres-payment-db | tail -20
        
        echo "=== Redis Logs ==="
        docker-compose -f docker-compose.payment-only.yml logs redis-cache | tail -20
    
    - name: Cleanup
      if: always()
      working-directory: backend
      run: |
        docker-compose -f docker-compose.payment-only.yml down -v
        docker system prune -f

  # Performance Test
  test-payment-performance:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-payment-docker-compose
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Start Payment Service
      working-directory: backend
      run: |
        docker-compose -f docker-compose.payment-only.yml up -d --build
        sleep 60
    
    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils
    
    - name: Run performance tests
      run: |
        echo "Running performance tests on Payment Service..."
        
        # Test health endpoint performance
        ab -n 1000 -c 10 http://localhost:3005/health
        
        # Test metrics endpoint performance
        ab -n 500 -c 5 http://localhost:3005/metrics
        
        echo "✅ Performance tests completed"
    
    - name: Cleanup
      if: always()
      working-directory: backend
      run: |
        docker-compose -f docker-compose.payment-only.yml down -v