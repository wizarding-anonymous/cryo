name: Build Only (Skip Tests)

on:
  workflow_dispatch:
  push:
    branches: [ main, develop ]
    paths:
      - '.github/workflows/build-only.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Node.js services
  build-nodejs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        service: [
          'api-gateway',
          'user-service',
          'game-catalog-service',
          'library-service',
          'review-service',
          'payment-service',
          'notification-service',
          'social-service',
          'achievement-service',
          'security-service'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      working-directory: backend/${{ matrix.service }}
      run: |
        if [ -f "package-lock.json" ]; then
          npm ci --legacy-peer-deps
        else
          npm install --legacy-peer-deps
        fi
    
    - name: Build service
      working-directory: backend/${{ matrix.service }}
      run: |
        if cat package.json | jq -e '.scripts.build' > /dev/null 2>&1; then
          echo "Building ${{ matrix.service }}..."
          npm run build
        else
          echo "Build script not found in ${{ matrix.service }}, skipping..."
        fi

  # Build Go service
  build-go:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: backend/download-service/go.sum
    
    - name: Install dependencies
      working-directory: backend/download-service
      run: go mod download
    
    - name: Build Go service
      working-directory: backend/download-service
      run: |
        echo "Building download-service..."
        if [ -f "cmd/server/main.go" ]; then
          go build -o main cmd/server/main.go
        elif [ -f "cmd/main.go" ]; then
          go build -o main cmd/main.go
        else
          echo "Could not find main.go file"
          find cmd -name "*.go" -type f
          exit 1
        fi

  # Build Docker images
  build-docker:
    runs-on: ubuntu-latest
    needs: [build-nodejs, build-go]
    if: github.event_name == 'push'
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        service: [
          'api-gateway',
          'user-service',
          'game-catalog-service',
          'library-service',
          'review-service',
          'payment-service',
          'notification-service',
          'social-service',
          'achievement-service',
          'security-service',
          'download-service'
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: backend/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max